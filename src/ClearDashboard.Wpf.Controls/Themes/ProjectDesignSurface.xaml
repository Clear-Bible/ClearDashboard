<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase"
    xmlns:local="clr-namespace:ClearDashboard.Wpf.Controls">
    <!--
        Include this in binding statements for diagnostics:
        diagnostics:PresentationTraceSources.TraceLevel=High
    -->

    <SolidColorBrush x:Key="selectionBorderColor" Color="Blue" />

    <SolidColorBrush
        x:Key="selectionBorderBackgroundColor"
        Opacity="0.25"
        Color="Blue" />

    <!--  Default style and control-template for 'NodeItem'.  -->
    <Style TargetType="{x:Type local:NodeItem}">

        <!--  Data-bind the parent ProjectDesignSurface.  -->
        <Setter Property="ParentProjectDesignSurface" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ProjectDesignSurface}}, Path=.}" />

        <!--  Set the position of the node within the canvas.  -->
        <Setter Property="Canvas.Left" Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />
        <Setter Property="Canvas.Top" Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />

        <!--  Set the z-order of the node within the canvas.  -->
        <Setter Property="Canvas.ZIndex" Value="{Binding ZIndex, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />

        <!--  Set defaults for background and border.  -->
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />

        <!--  The control-template for the node.  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NodeItem}">
                    <Grid>

                        <!--
                            This border indicates that node is selected.
                            Normally it is transparent, but when 'IsSelected' is set
                            to 'true' the border brush becomes blue and its background
                            becomds light blue.
                        -->
                        <Border
                            x:Name="selectionBorder"
                            Margin="{TemplateBinding Margin}"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">

                            <!--
                                User-defined node content is presented here.
                            -->
                            <ContentPresenter />

                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsSelected" Value="True">

                            <!--  When the node is selected, set the color of 'selectionBorder' to blue.  -->
                            <Setter TargetName="selectionBorder" Property="BorderBrush" Value="{StaticResource selectionBorderColor}" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">

                            <!--  When the node is selected, set the background of 'selectionBorder' to light blue.  -->
                            <Setter TargetName="selectionBorder" Property="Background" Value="{StaticResource selectionBorderBackgroundColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Default style and control-template for 'ConnectorItem'.  -->
    <Style TargetType="{x:Type local:ConnectorItem}">

        <!--  Data-bind the parent ProjectDesignSurface.  -->
        <Setter Property="ParentProjectDesignSurface" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ProjectDesignSurface}}, Path=.}" />

        <!--  Data-bind the parent NodeItem.  -->
        <Setter Property="ParentNodeItem" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NodeItem}}, Path=.}" />

        <!--  The control-template for the connector.  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ConnectorItem}">

                    <!--  Application-defined connector content is presented here.  -->
                    <ContentPresenter />

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        Override the style of the ListBox to remove the ScrollViewer.
        All we want is ListBox logic but based on a Canvas.
    -->
    <Style x:Key="noScrollViewerListBoxStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <!--
                        The ListBoxItems are presented in a Canvas.
                        'IsItemsHost' is set to 'True' so that the ListBox
                        uses the Canvas as the container for its items.
                    -->
                    <Canvas IsItemsHost="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Default style and visual template for 'ProjectDesignSurface'.  -->
    <Style TargetType="{x:Type local:ProjectDesignSurface}">

        <!--  The visual template.  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ProjectDesignSurface}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>

                            <!--  Control that presents the nodes.  -->
                            <local:NodeItemsControl
                                x:Name="PART_NodeItemsControl"
                                ItemContainerStyle="{TemplateBinding NodeItemContainerStyle}"
                                ItemTemplate="{TemplateBinding NodeItemTemplate}"
                                ItemTemplateSelector="{TemplateBinding NodeItemTemplateSelector}"
                                ItemsSource="{TemplateBinding Nodes}"
                                SelectionMode="Extended"
                                Style="{StaticResource noScrollViewerListBoxStyle}" />

                            <!--  Control that presents the connections between nodes.  -->
                            <ItemsControl
                                x:Name="PART_ConnectionItemsControl"
                                ItemContainerStyle="{TemplateBinding ConnectionItemContainerStyle}"
                                ItemTemplate="{TemplateBinding ConnectionItemTemplate}"
                                ItemTemplateSelector="{TemplateBinding ConnectionItemTemplateSelector}"
                                ItemsSource="{TemplateBinding Connections}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <!--  Connections are presented in a Canvas.  -->
                                        <Canvas />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>

                            <!--
                                This Canvas and Border are used as a very simple way to render a drag selection rectangle.
                            -->
                            <Canvas x:Name="PART_DragSelectionCanvas" Visibility="Collapsed">
                                <Border
                                    x:Name="PART_DragSelectionBorder"
                                    Background="LightBlue"
                                    BorderBrush="Blue"
                                    BorderThickness="1"
                                    CornerRadius="1"
                                    Opacity="0.5" />
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
