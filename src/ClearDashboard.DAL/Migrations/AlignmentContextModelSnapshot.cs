// <auto-generated />
using System;
using ClearDashboard.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClearDashboard.DataAccessLayer.Migrations
{
    [DbContext(typeof(AlignmentContext))]
    partial class AlignmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lemma")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PartsOfSpeech")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Strong")
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("TokenId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("Adornment", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlignmentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlignmentVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(3)");

                    b.Property<int>("SourceTokenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetTokenId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlignmentTypeId");

                    b.HasIndex("AlignmentVersionId");

                    b.HasIndex("SourceTokenId")
                        .IsUnique();

                    b.HasIndex("TargetTokenId")
                        .IsUnique();

                    b.ToTable("Alignment", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AlignmentType", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AlignmentVersion", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CorpusTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("bit")
                        .HasColumnName("IsRTL");

                    b.Property<int?>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParatextGuid")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ParatextGUID");

                    b.HasKey("Id");

                    b.HasIndex("CorpusTypeId");

                    b.ToTable("Corpus", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.CorpusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Description")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CorpusType", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(600)");

                    b.Property<int?>("TokenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("InterlinearNotes");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlignmentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastGenerated")
                        .HasColumnType("datetime");

                    b.Property<int>("SourceCorpusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetCorpusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceCorpusId")
                        .IsUnique();

                    b.HasIndex("TargetCorpusId")
                        .IsUnique();

                    b.ToTable("ParallelCorpus", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVerse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParallelCorpusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceVerseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetVerseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParallelCorpusId");

                    b.HasIndex("SourceVerseId")
                        .IsUnique();

                    b.HasIndex("TargetVerseId")
                        .IsUnique();

                    b.ToTable("ParallelVerse", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ProjectInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("bit")
                        .HasColumnName("IsRTL");

                    b.Property<int?>("LastContentWordLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectInfo", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.QuestionGroup", b =>
                {
                    b.Property<string>("AltText")
                        .HasColumnType("TEXT");

                    b.Property<string>("English")
                        .HasColumnType("TEXT");

                    b.Property<double>("LastChanged")
                        .HasColumnType("REAL");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.ToTable("QuestionGroup", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstLetter")
                        .HasColumnType("varchar(2)");

                    b.Property<int>("PartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("VerseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VerseId")
                        .IsUnique();

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastAlignmentLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParatextUsername")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookId")
                        .HasColumnType("varchar(2)");

                    b.Property<int?>("CorpusId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<string>("VerseText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CorpusId");

                    b.ToTable("Verse", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithOne("Adornment")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Adornment", "TokenId");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentType", "AlignmentType")
                        .WithMany("Alignments")
                        .HasForeignKey("AlignmentTypeId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", "AlignmentVersion")
                        .WithMany("Alignments")
                        .HasForeignKey("AlignmentVersionId");

                    b.Navigation("AlignmentType");

                    b.Navigation("AlignmentVersion");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany("AlignmentVersions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.CorpusType", "CorpusType")
                        .WithMany("Corpa")
                        .HasForeignKey("CorpusTypeId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithOne("CorpusCorpus")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Corpus", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "SourceCorpusId")
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "CorpusNavigation")
                        .WithOne("CorpusCorpusNavigation")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Corpus", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "TargetCorpusId")
                        .IsRequired()
                        .HasConstraintName("FK_Corpus_ParallelCorpus_Id1");

                    b.Navigation("CorpusNavigation");

                    b.Navigation("CorpusType");

                    b.Navigation("ParallelCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithMany("InterlinearNotes")
                        .HasForeignKey("TokenId");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVerse", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("ParallelVerses")
                        .HasForeignKey("ParallelCorpusId");

                    b.Navigation("ParallelCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Alignment", "TokenNavigation")
                        .WithOne("TokenTokenNavigation")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Token", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.Alignment", "SourceTokenId")
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Alignment", "Token1")
                        .WithOne("TokenToken1")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Token", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.Alignment", "TargetTokenId")
                        .IsRequired()
                        .HasConstraintName("FK_Token_Alignment_Id1");

                    b.Navigation("Token1");

                    b.Navigation("TokenNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.InterlinearNote", "UserNavigation")
                        .WithOne("User")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.User", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.InterlinearNote", "UserId")
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "Corpus")
                        .WithMany("Verses")
                        .HasForeignKey("CorpusId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelVerse", "VerseNavigation")
                        .WithOne("VerseVerseNavigation")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Verse", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.ParallelVerse", "SourceVerseId")
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelVerse", "Verse1")
                        .WithOne("VerseVerse1")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Verse", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.ParallelVerse", "TargetVerseId")
                        .IsRequired()
                        .HasConstraintName("FK_Verse_ParallelVerse_Id1");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Verse2")
                        .WithOne("Verse")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Verse", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.Token", "VerseId")
                        .IsRequired();

                    b.Navigation("Corpus");

                    b.Navigation("Verse1");

                    b.Navigation("Verse2");

                    b.Navigation("VerseNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.Navigation("TokenToken1");

                    b.Navigation("TokenTokenNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentType", b =>
                {
                    b.Navigation("Alignments");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.Navigation("Alignments");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Navigation("Verses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.CorpusType", b =>
                {
                    b.Navigation("Corpa");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Navigation("CorpusCorpus");

                    b.Navigation("CorpusCorpusNavigation");

                    b.Navigation("ParallelVerses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVerse", b =>
                {
                    b.Navigation("VerseVerse1");

                    b.Navigation("VerseVerseNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.Navigation("Adornment");

                    b.Navigation("InterlinearNotes");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("AlignmentVersions");
                });
#pragma warning restore 612, 618
        }
    }
}
