// <auto-generated />
using System;
using ClearDashboard.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClearDashboard.DataAccessLayer.Migrations
{
    [DbContext(typeof(AlignmentContext))]
    [Migration("20220317000051_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Lemma")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pos")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("POS");

                    b.Property<string>("Strong")
                        .HasColumnType("varchar(15)");

                    b.Property<long?>("TokenId")
                        .HasColumnType("bigint")
                        .HasColumnName("TokenId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "pk_Adornments")
                        .IsUnique();

                    b.HasIndex(new[] { "TokenId" }, "unq_Adornments_TokenId")
                        .IsUnique();

                    b.ToTable("Adornment", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AlignmentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("AlignmentTypeId");

                    b.Property<long?>("AlignmentVersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("AlignmentVersionId");

                    b.Property<byte[]>("Score")
                        .HasColumnType("decimal(3)");

                    b.Property<long>("SourceTokenId")
                        .HasColumnType("integer")
                        .HasColumnName("SourceTokenId");

                    b.Property<long>("TargetTokenId")
                        .HasColumnType("integer")
                        .HasColumnName("TargetTokenId");

                    b.HasKey("Id");

                    b.HasIndex("AlignmentTypeId");

                    b.HasIndex("AlignmentVersionId");

                    b.HasIndex(new[] { "SourceTokenId" }, "IX_Alignment_SourceTokenId")
                        .IsUnique();

                    b.HasIndex(new[] { "TargetTokenId" }, "IX_Alignment_TargetTokenId")
                        .IsUnique();

                    b.HasIndex(new[] { "SourceTokenId" }, "Unq_Alignment_SourceTokenId")
                        .IsUnique();

                    b.HasIndex(new[] { "TargetTokenId" }, "Unq_Alignment_TargetTokenId")
                        .IsUnique();

                    b.ToTable("Alignment", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AlignmentType", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IsDirty")
                        .HasColumnType("bit");

                    b.Property<long?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AlignmentVersion", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("integer");

                    b.Property<long?>("CorpusTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("CorpusTypeId");

                    b.Property<byte[]>("IsRtl")
                        .HasColumnType("bit")
                        .HasColumnName("IsRTL");

                    b.Property<long?>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParatextGuid")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ParatextGUID");

                    b.HasKey("Id");

                    b.HasIndex("CorpusTypeId");

                    b.ToTable("Corpus", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.CorpusType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("integer");

                    b.Property<long?>("Description")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "Pk_CorpusType_CorpusTypeId")
                        .IsUnique();

                    b.ToTable("CorpusType", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(600)");

                    b.Property<long?>("TokenId")
                        .HasColumnType("bigint")
                        .HasColumnName("TokenId");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.HasIndex(new[] { "UserId" }, "unq_InterlinearNotes_UserId")
                        .IsUnique();

                    b.ToTable("InterlinearNotes");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("AlignmentType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("LastGenerated")
                        .HasColumnType("datetime");

                    b.Property<long>("SourceCorpusId")
                        .HasColumnType("integer")
                        .HasColumnName("SourceCorpusId");

                    b.Property<long>("TargetCorpusId")
                        .HasColumnType("integer")
                        .HasColumnName("TargetCorpusId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SourceCorpusId" }, "IX_ParallelCorpus_SourceCorpusId")
                        .IsUnique();

                    b.HasIndex(new[] { "TargetCorpusId" }, "IX_ParallelCorpus_TargetCorpusId")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "Pk_ParallelCorpus_ParallelCorpusId")
                        .IsUnique();

                    b.HasIndex(new[] { "SourceCorpusId" }, "Unq_ParallelCorpus_SourceCorpusId")
                        .IsUnique();

                    b.HasIndex(new[] { "TargetCorpusId" }, "Unq_ParallelCorpus_TargetCorpusId")
                        .IsUnique();

                    b.ToTable("ParallelCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVerse", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParallelCorpusId")
                        .HasColumnType("integer")
                        .HasColumnName("ParallelCorpusId");

                    b.Property<long>("SourceVerseId")
                        .HasColumnType("bigint")
                        .HasColumnName("SourceVerseId");

                    b.Property<long>("TargetVerseId")
                        .HasColumnType("bigint")
                        .HasColumnName("TargetVerseId");

                    b.HasKey("Id");

                    b.HasIndex("ParallelCorpusId");

                    b.HasIndex(new[] { "SourceVerseId" }, "IX_ParallelVerses_SourceVerseId")
                        .IsUnique();

                    b.HasIndex(new[] { "TargetVerseId" }, "IX_ParallelVerses_TargetVerseId")
                        .IsUnique();

                    b.HasIndex(new[] { "SourceVerseId" }, "Unq_ParallelVerses_SourceVerseId")
                        .IsUnique();

                    b.HasIndex(new[] { "TargetVerseId" }, "Unq_ParallelVerses_TargetVerseId")
                        .IsUnique();

                    b.ToTable("ParallelVerses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ProjectInfo", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("integer");

                    b.Property<byte[]>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IsRtl")
                        .HasColumnType("bit")
                        .HasColumnName("IsRTL");

                    b.Property<long?>("LastContentWordLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectInfo", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.QuestionGroup", b =>
                {
                    b.Property<string>("AltText")
                        .HasColumnType("TEXT");

                    b.Property<string>("English")
                        .HasColumnType("TEXT");

                    b.Property<double>("LastChanged")
                        .HasColumnType("REAL");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.ToTable("QuestionGroup", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("WordId");

                    b.Property<long>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("PartId");

                    b.Property<long>("VerseId")
                        .HasColumnType("bigint")
                        .HasColumnName("VerseId");

                    b.Property<string>("FirstLetter")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Text")
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id", "WordId", "PartId", "VerseId");

                    b.HasIndex(new[] { "VerseId" }, "IX_Token_VerseId")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "Unq_Token_TokenId")
                        .IsUnique();

                    b.HasIndex(new[] { "VerseId" }, "Unq_Token_VerseId")
                        .IsUnique();

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastAlignmentLevelId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastAlignmentLevelId");

                    b.Property<string>("ParatextUsername")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("BookId")
                        .HasColumnType("varchar(2)");

                    b.Property<long?>("CorpusId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<string>("VerseText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CorpusId");

                    b.ToTable("Verse", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithOne("Adornment")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Adornment", "TokenId")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.Token", "Id");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentType", "AlignmentType")
                        .WithMany("Alignments")
                        .HasForeignKey("AlignmentTypeId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", "AlignmentVersion")
                        .WithMany("Alignments")
                        .HasForeignKey("AlignmentVersionId");

                    b.Navigation("AlignmentType");

                    b.Navigation("AlignmentVersion");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany("AlignmentVersions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.CorpusType", "CorpusType")
                        .WithMany("Corpa")
                        .HasForeignKey("CorpusTypeId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithOne("CorpusCorpus")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Corpus", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "SourceCorpusId")
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "CorpusNavigation")
                        .WithOne("CorpusCorpusNavigation")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Corpus", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "TargetCorpusId")
                        .IsRequired()
                        .HasConstraintName("FK_Corpus_ParallelCorpus_Id1");

                    b.Navigation("CorpusNavigation");

                    b.Navigation("CorpusType");

                    b.Navigation("ParallelCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithMany("InterlinearNotes")
                        .HasForeignKey("TokenId")
                        .HasPrincipalKey("Id");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVerse", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("ParallelVerses")
                        .HasForeignKey("ParallelCorpusId");

                    b.Navigation("ParallelCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Alignment", "TokenNavigation")
                        .WithOne("TokenTokenNavigation")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Token", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.Alignment", "SourceTokenId")
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Alignment", "Token1")
                        .WithOne("TokenToken1")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Token", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.Alignment", "TargetTokenId")
                        .IsRequired()
                        .HasConstraintName("FK_Token_Alignment_Id1");

                    b.Navigation("Token1");

                    b.Navigation("TokenNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.InterlinearNote", "UserNavigation")
                        .WithOne("User")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.User", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.InterlinearNote", "UserId")
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "Corpus")
                        .WithMany("Verses")
                        .HasForeignKey("CorpusId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelVerse", "VerseNavigation")
                        .WithOne("VerseVerseNavigation")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Verse", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.ParallelVerse", "SourceVerseId")
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelVerse", "Verse1")
                        .WithOne("VerseVerse1")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Verse", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.ParallelVerse", "TargetVerseId")
                        .IsRequired()
                        .HasConstraintName("FK_Verse_ParallelVerses_Id1");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Verse2")
                        .WithOne("Verse")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Verse", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.Token", "VerseId")
                        .IsRequired();

                    b.Navigation("Corpus");

                    b.Navigation("Verse1");

                    b.Navigation("Verse2");

                    b.Navigation("VerseNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.Navigation("TokenToken1");

                    b.Navigation("TokenTokenNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentType", b =>
                {
                    b.Navigation("Alignments");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.Navigation("Alignments");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Navigation("Verses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.CorpusType", b =>
                {
                    b.Navigation("Corpa");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Navigation("CorpusCorpus");

                    b.Navigation("CorpusCorpusNavigation");

                    b.Navigation("ParallelVerses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVerse", b =>
                {
                    b.Navigation("VerseVerse1");

                    b.Navigation("VerseVerseNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.Navigation("Adornment");

                    b.Navigation("InterlinearNotes");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("AlignmentVersions");
                });
#pragma warning restore 612, 618
        }
    }
}
