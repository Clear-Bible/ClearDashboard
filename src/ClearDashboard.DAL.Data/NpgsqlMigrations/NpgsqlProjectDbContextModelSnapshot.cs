// <auto-generated />
using System;
using ClearDashboard.DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClearDashboard.DataAccessLayer.Data.NpgsqlMigrations
{
    [DbContext(typeof(NpgsqlProjectDbContext))]
    partial class NpgsqlProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Lemma")
                        .HasColumnType("text")
                        .HasColumnName("lemma");

                    b.Property<string>("PartsOfSpeech")
                        .HasColumnType("text")
                        .HasColumnName("parts_of_speech");

                    b.Property<string>("Strong")
                        .HasColumnType("text")
                        .HasColumnName("strong");

                    b.Property<Guid?>("TokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("token_id");

                    b.Property<string>("TokenMorphology")
                        .HasColumnType("text")
                        .HasColumnName("token_morphology");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_adornments");

                    b.HasIndex("TokenId")
                        .IsUnique()
                        .HasDatabaseName("ix_adornments_token_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_adornments_user_id");

                    b.ToTable("adornments", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AlignmentOriginatedFrom")
                        .HasColumnType("integer")
                        .HasColumnName("alignment_originated_from");

                    b.Property<Guid>("AlignmentSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("alignment_set_id");

                    b.Property<int>("AlignmentVerification")
                        .HasColumnType("integer")
                        .HasColumnName("alignment_verification");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<double>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<Guid>("SourceTokenComponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_token_component_id");

                    b.Property<Guid>("TargetTokenComponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_token_component_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_alignments");

                    b.HasIndex("AlignmentSetId")
                        .HasDatabaseName("ix_alignments_alignment_set_id");

                    b.HasIndex("SourceTokenComponentId")
                        .HasDatabaseName("ix_alignments_source_token_component_id");

                    b.HasIndex("TargetTokenComponentId")
                        .HasDatabaseName("ix_alignments_target_token_component_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_alignments_user_id");

                    b.ToTable("alignments", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsSymmetrized")
                        .HasColumnType("boolean")
                        .HasColumnName("is_symmetrized");

                    b.Property<bool>("IsSyntaxTreeAlignerRefined")
                        .HasColumnType("boolean")
                        .HasColumnName("is_syntax_tree_aligner_refined");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid?>("ParallelCorpusHistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parallel_corpus_history_id");

                    b.Property<Guid>("ParallelCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("parallel_corpus_id");

                    b.Property<string>("SmtModel")
                        .HasColumnType("text")
                        .HasColumnName("smt_model");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_alignment_sets");

                    b.HasIndex("ParallelCorpusHistoryId")
                        .HasDatabaseName("ix_alignment_sets_parallel_corpus_history_id");

                    b.HasIndex("ParallelCorpusId")
                        .HasDatabaseName("ix_alignment_sets_parallel_corpus_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_alignment_sets_user_id");

                    b.ToTable("alignment_sets", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentSetDenormalizationTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlignmentSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("alignment_set_id");

                    b.Property<string>("SourceText")
                        .HasColumnType("text")
                        .HasColumnName("source_text");

                    b.HasKey("Id")
                        .HasName("pk_alignment_set_denormalization_tasks");

                    b.HasIndex("AlignmentSetId")
                        .HasDatabaseName("ix_alignment_set_denormalization_tasks_alignment_set_id");

                    b.ToTable("alignment_set_denormalization_tasks", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentTopTargetTrainingText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlignmentSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("alignment_set_id");

                    b.Property<Guid>("SourceTokenComponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_token_component_id");

                    b.Property<string>("SourceTrainingText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source_training_text");

                    b.Property<string>("TopTargetTrainingText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("top_target_training_text");

                    b.HasKey("Id")
                        .HasName("pk_alignment_top_target_training_texts");

                    b.HasIndex("SourceTokenComponentId")
                        .HasDatabaseName("IX_Align_Top_Training_Source_Token_Id");

                    b.HasIndex("AlignmentSetId", "SourceTokenComponentId")
                        .HasDatabaseName("IX_Align_Top_Training_Align_Set_Id_Source_Token_Id");

                    b.HasIndex("AlignmentSetId", "SourceTrainingText")
                        .HasDatabaseName("IX_Align_Top_Training_Align_Set_Id_Source_Training");

                    b.ToTable("alignment_top_target_training_texts", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CorpusType")
                        .HasColumnType("integer")
                        .HasColumnName("corpus_type");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("FontFamily")
                        .HasColumnType("text")
                        .HasColumnName("font_family");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rtl");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParatextGuid")
                        .HasColumnType("text")
                        .HasColumnName("paratext_guid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_corpa");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_corpa_user_id");

                    b.ToTable("corpa", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.CorpusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CorpusType")
                        .HasColumnType("integer")
                        .HasColumnName("corpus_type");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rtl");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParatextGuid")
                        .HasColumnType("text")
                        .HasColumnName("paratext_guid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_corpa_history");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_corpa_history_user_id");

                    b.ToTable("corpa_history", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("TemplateText")
                        .HasColumnType("text")
                        .HasColumnName("template_text");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_labels");

                    b.HasIndex("Text")
                        .IsUnique()
                        .HasDatabaseName("ix_labels_text");

                    b.ToTable("labels", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.LabelGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_label_groups");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_label_groups_name");

                    b.ToTable("label_groups", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.LabelGroupAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("LabelGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("label_group_id");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid")
                        .HasColumnName("label_id");

                    b.HasKey("Id")
                        .HasName("pk_label_group_associations");

                    b.HasIndex("LabelGroupId")
                        .HasDatabaseName("ix_label_group_associations_label_group_id");

                    b.HasIndex("LabelId")
                        .HasDatabaseName("ix_label_group_associations_label_id");

                    b.ToTable("label_group_associations", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.LabelNoteAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid")
                        .HasColumnName("label_id");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("note_id");

                    b.HasKey("Id")
                        .HasName("pk_label_note_associations");

                    b.HasIndex("LabelId")
                        .HasDatabaseName("ix_label_note_associations_label_id");

                    b.HasIndex("NoteId")
                        .HasDatabaseName("ix_label_note_associations_note_id");

                    b.ToTable("label_note_associations", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("LexemeId")
                        .HasColumnType("uuid")
                        .HasColumnName("lexeme_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lexicon_forms");

                    b.HasIndex("LexemeId")
                        .HasDatabaseName("ix_lexicon_forms_lexeme_id");

                    b.HasIndex("Text")
                        .HasDatabaseName("ix_lexicon_forms_text");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lexicon_forms_user_id");

                    b.ToTable("lexicon_forms", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_Lexeme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Lemma")
                        .HasColumnType("text")
                        .HasColumnName("lemma");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lexicon_lexemes");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lexicon_lexemes_user_id");

                    b.HasIndex("Lemma", "Language")
                        .IsUnique()
                        .HasDatabaseName("IX_Lexicon_Lexeme_Lemma_TypeNull_Language")
                        .HasFilter("Type IS NULL");

                    b.HasIndex("Lemma", "Type", "Language")
                        .IsUnique()
                        .HasDatabaseName("IX_Lexicon_Lexeme_Lemma_TypeNotNull_Language")
                        .HasFilter("Type IS NOT NULL");

                    b.ToTable("lexicon_lexemes", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_Meaning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<Guid>("LexemeId")
                        .HasColumnType("uuid")
                        .HasColumnName("lexeme_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lexicon_meanings");

                    b.HasIndex("LexemeId")
                        .HasDatabaseName("ix_lexicon_meanings_lexeme_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lexicon_meanings_user_id");

                    b.ToTable("lexicon_meanings", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_SemanticDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lexicon_semantic_domains");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lexicon_semantic_domains_user_id");

                    b.ToTable("lexicon_semantic_domains", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_SemanticDomainMeaningAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MeaningId")
                        .HasColumnType("uuid")
                        .HasColumnName("meaning_id");

                    b.Property<Guid>("SemanticDomainId")
                        .HasColumnType("uuid")
                        .HasColumnName("semantic_domain_id");

                    b.HasKey("Id")
                        .HasName("pk_lexicon_semantic_domain_meaning_associations");

                    b.HasIndex("MeaningId")
                        .HasDatabaseName("ix_lexicon_semantic_domain_meaning_associations_meaning_id");

                    b.HasIndex("SemanticDomainId")
                        .HasDatabaseName("ix_lexicon_semantic_domain_meaning_associations_semantic_domai");

                    b.ToTable("lexicon_semantic_domain_meaning_associations", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("MeaningId")
                        .HasColumnType("uuid")
                        .HasColumnName("meaning_id");

                    b.Property<string>("OriginatedFrom")
                        .HasColumnType("jsonb")
                        .HasColumnName("originated_from");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lexicon_translations");

                    b.HasIndex("MeaningId")
                        .HasDatabaseName("ix_lexicon_translations_meaning_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lexicon_translations_user_id");

                    b.ToTable("lexicon_translations", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AbbreviatedText")
                        .HasColumnType("text")
                        .HasColumnName("abbreviated_text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<int>("NoteStatus")
                        .HasColumnType("integer")
                        .HasColumnName("note_status");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid?>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notes");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notes_user_id");

                    b.ToTable("notes", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteDomainEntityAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DomainEntityIdGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("domain_entity_id_guid");

                    b.Property<string>("DomainEntityIdName")
                        .HasColumnType("text")
                        .HasColumnName("domain_entity_id_name");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("note_id");

                    b.HasKey("Id")
                        .HasName("pk_note_domain_entity_associations");

                    b.HasIndex("NoteId")
                        .HasDatabaseName("ix_note_domain_entity_associations_note_id");

                    b.ToTable("note_domain_entity_associations", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("note_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_note_recipient");

                    b.HasIndex("NoteId")
                        .HasDatabaseName("ix_note_recipient_note_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_note_recipient_user_id");

                    b.ToTable("note_recipient", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteUserSeenAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("note_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_note_user_seen_associations");

                    b.HasIndex("NoteId")
                        .HasDatabaseName("ix_note_user_seen_associations_note_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_note_user_seen_associations_user_id");

                    b.ToTable("note_user_seen_associations", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid>("SourceTokenizedCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_tokenized_corpus_id");

                    b.Property<Guid>("TargetTokenizedCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_tokenized_corpus_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_parallel_corpa");

                    b.HasIndex("SourceTokenizedCorpusId")
                        .HasDatabaseName("ix_parallel_corpa_source_tokenized_corpus_id");

                    b.HasIndex("TargetTokenizedCorpusId")
                        .HasDatabaseName("ix_parallel_corpa_target_tokenized_corpus_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_parallel_corpa_user_id");

                    b.ToTable("parallel_corpa", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid>("SourceTokenizedCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_tokenized_corpus_id");

                    b.Property<Guid>("TargetTokenizedCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_tokenized_corpus_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_parallel_corpa_history");

                    b.HasIndex("SourceTokenizedCorpusId")
                        .HasDatabaseName("ix_parallel_corpa_history_source_tokenized_corpus_id");

                    b.HasIndex("TargetTokenizedCorpusId")
                        .HasDatabaseName("ix_parallel_corpa_history_target_tokenized_corpus_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_parallel_corpa_history_user_id");

                    b.ToTable("parallel_corpa_history", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AppVersion")
                        .HasColumnType("text")
                        .HasColumnName("app_version");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("DesignSurfaceLayout")
                        .HasColumnType("text")
                        .HasColumnName("design_surface_layout");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rtl");

                    b.Property<string>("LastMergedCommitSha")
                        .HasColumnType("text")
                        .HasColumnName("last_merged_commit_sha");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text")
                        .HasColumnName("project_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("WindowTabLayout")
                        .HasColumnType("text")
                        .HasColumnName("window_tab_layout");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_projects_user_id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("discriminator");

                    b.Property<string>("EngineTokenId")
                        .HasColumnType("text")
                        .HasColumnName("engine_token_id");

                    b.Property<string>("ExtendedProperties")
                        .HasColumnType("text")
                        .HasColumnName("extended_properties");

                    b.Property<string>("SurfaceText")
                        .HasColumnType("text")
                        .HasColumnName("surface_text");

                    b.Property<Guid>("TokenizedCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("tokenized_corpus_id");

                    b.Property<string>("TrainingText")
                        .HasColumnType("text")
                        .HasColumnName("training_text");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid?>("VerseRowId")
                        .HasColumnType("uuid")
                        .HasColumnName("verse_row_id");

                    b.HasKey("Id")
                        .HasName("pk_token_components");

                    b.HasIndex("EngineTokenId")
                        .HasDatabaseName("ix_token_components_engine_token_id");

                    b.HasIndex("SurfaceText")
                        .HasDatabaseName("ix_token_components_surface_text");

                    b.HasIndex("TokenizedCorpusId")
                        .HasDatabaseName("ix_token_components_tokenized_corpus_id");

                    b.HasIndex("TrainingText")
                        .HasDatabaseName("ix_token_components_training_text");

                    b.HasIndex("VerseRowId")
                        .HasDatabaseName("ix_token_components_verse_row_id");

                    b.ToTable("token_components", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("TokenComponent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenCompositeTokenAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid>("TokenCompositeId")
                        .HasColumnType("uuid")
                        .HasColumnName("token_composite_id");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("token_id");

                    b.HasKey("Id")
                        .HasName("pk_token_composite_token_associations");

                    b.HasIndex("TokenCompositeId")
                        .HasDatabaseName("ix_token_composite_token_associations_token_composite_id");

                    b.HasIndex("TokenId")
                        .HasDatabaseName("ix_token_composite_token_associations_token_id");

                    b.ToTable("token_composite_token_associations", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenVerseAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<Guid>("TokenComponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("token_component_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("VerseId")
                        .HasColumnType("uuid")
                        .HasColumnName("verse_id");

                    b.HasKey("Id")
                        .HasName("pk_token_verse_associations");

                    b.HasIndex("TokenComponentId")
                        .HasDatabaseName("ix_token_verse_associations_token_component_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_token_verse_associations_user_id");

                    b.HasIndex("VerseId")
                        .HasDatabaseName("ix_token_verse_associations_verse_id");

                    b.ToTable("token_verse_associations", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CorpusHistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("corpus_history_id");

                    b.Property<Guid>("CorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("corpus_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CustomVersData")
                        .HasColumnType("text")
                        .HasColumnName("custom_vers_data");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<DateTimeOffset?>("LastTokenized")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_tokenized");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<int>("ScrVersType")
                        .HasColumnType("integer")
                        .HasColumnName("scr_vers_type");

                    b.Property<string>("TokenizationFunction")
                        .HasColumnType("text")
                        .HasColumnName("tokenization_function");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tokenized_corpora");

                    b.HasIndex("CorpusHistoryId")
                        .HasDatabaseName("ix_tokenized_corpora_corpus_history_id");

                    b.HasIndex("CorpusId")
                        .HasDatabaseName("ix_tokenized_corpora_corpus_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tokenized_corpora_user_id");

                    b.ToTable("tokenized_corpora", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("LexiconTranslationId")
                        .HasColumnType("uuid")
                        .HasColumnName("lexicon_translation_id");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<Guid>("SourceTokenComponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_token_component_id");

                    b.Property<string>("TargetText")
                        .HasColumnType("text")
                        .HasColumnName("target_text");

                    b.Property<Guid>("TranslationSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("translation_set_id");

                    b.Property<int>("TranslationState")
                        .HasColumnType("integer")
                        .HasColumnName("translation_state");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_translations");

                    b.HasIndex("LexiconTranslationId")
                        .HasDatabaseName("ix_translations_lexicon_translation_id");

                    b.HasIndex("SourceTokenComponentId")
                        .HasDatabaseName("ix_translations_source_token_component_id");

                    b.HasIndex("TranslationSetId")
                        .HasDatabaseName("ix_translations_translation_set_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_translations_user_id");

                    b.ToTable("translations", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationModelEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("SourceText")
                        .HasColumnType("text")
                        .HasColumnName("source_text");

                    b.Property<Guid>("TranslationSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("translation_set_id");

                    b.HasKey("Id")
                        .HasName("pk_translation_model_entries");

                    b.HasIndex("TranslationSetId", "SourceText")
                        .IsUnique()
                        .HasDatabaseName("IX_Trans_Model_Entry_Trans_Set_Id_Source_Text");

                    b.ToTable("translation_model_entries", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationModelTargetTextScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("TranslationModelEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("translation_model_entry_id");

                    b.HasKey("Id")
                        .HasName("pk_translation_model_target_text_score");

                    b.HasIndex("TranslationModelEntryId", "Text")
                        .IsUnique()
                        .HasDatabaseName("IX_Trans_Model_Score_Entry_Id_Text");

                    b.ToTable("translation_model_target_text_score", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlignmentSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("alignment_set_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid?>("DerivedFromId")
                        .HasColumnType("uuid")
                        .HasColumnName("derived_from_id");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid?>("ParallelCorpusHistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parallel_corpus_history_id");

                    b.Property<Guid>("ParallelCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("parallel_corpus_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_translation_sets");

                    b.HasIndex("AlignmentSetId")
                        .HasDatabaseName("ix_translation_sets_alignment_set_id");

                    b.HasIndex("DerivedFromId")
                        .HasDatabaseName("ix_translation_sets_derived_from_id");

                    b.HasIndex("ParallelCorpusHistoryId")
                        .HasDatabaseName("ix_translation_sets_parallel_corpus_history_id");

                    b.HasIndex("ParallelCorpusId")
                        .HasDatabaseName("ix_translation_sets_parallel_corpus_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_translation_sets_user_id");

                    b.ToTable("translation_sets", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DefaultLabelGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_label_group_id");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int?>("LastAlignmentLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("last_alignment_level_id");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BBBCCCVVV")
                        .HasColumnType("text")
                        .HasColumnName("bbbcccvvv");

                    b.Property<int?>("BookNumber")
                        .HasColumnType("integer")
                        .HasColumnName("book_number");

                    b.Property<int?>("ChapterNumber")
                        .HasColumnType("integer")
                        .HasColumnName("chapter_number");

                    b.Property<Guid?>("CorpusHistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("corpus_history_id");

                    b.Property<Guid?>("CorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("corpus_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid>("ParallelCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("parallel_corpus_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("VerseMappingId")
                        .HasColumnType("uuid")
                        .HasColumnName("verse_mapping_id");

                    b.Property<int?>("VerseNumber")
                        .HasColumnType("integer")
                        .HasColumnName("verse_number");

                    b.Property<string>("VerseText")
                        .HasColumnType("text")
                        .HasColumnName("verse_text");

                    b.HasKey("Id")
                        .HasName("pk_verses");

                    b.HasIndex("BBBCCCVVV")
                        .HasDatabaseName("ix_verses_bbbcccvvv");

                    b.HasIndex("BookNumber")
                        .HasDatabaseName("ix_verses_book_number");

                    b.HasIndex("ChapterNumber")
                        .HasDatabaseName("ix_verses_chapter_number");

                    b.HasIndex("CorpusHistoryId")
                        .HasDatabaseName("ix_verses_corpus_history_id");

                    b.HasIndex("CorpusId")
                        .HasDatabaseName("ix_verses_corpus_id");

                    b.HasIndex("ParallelCorpusId")
                        .HasDatabaseName("ix_verses_parallel_corpus_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_verses_user_id");

                    b.HasIndex("VerseMappingId")
                        .HasDatabaseName("ix_verses_verse_mapping_id");

                    b.HasIndex("VerseNumber")
                        .HasDatabaseName("ix_verses_verse_number");

                    b.ToTable("verses", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid?>("ParallelCorpusHistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parallel_corpus_history_id");

                    b.Property<Guid>("ParallelCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("parallel_corpus_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_verse_mappings");

                    b.HasIndex("ParallelCorpusHistoryId")
                        .HasDatabaseName("ix_verse_mappings_parallel_corpus_history_id");

                    b.HasIndex("ParallelCorpusId")
                        .HasDatabaseName("ix_verse_mappings_parallel_corpus_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_verse_mappings_user_id");

                    b.ToTable("verse_mappings", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseRow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BookChapterVerse")
                        .HasColumnType("text")
                        .HasColumnName("book_chapter_verse");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("boolean")
                        .HasColumnName("is_empty");

                    b.Property<bool>("IsInRange")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_range");

                    b.Property<bool>("IsRangeStart")
                        .HasColumnType("boolean")
                        .HasColumnName("is_range_start");

                    b.Property<bool>("IsSentenceStart")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sentence_start");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("OriginalText")
                        .HasColumnType("text")
                        .HasColumnName("original_text");

                    b.Property<Guid>("TokenizedCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("tokenized_corpus_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_verse_rows");

                    b.HasIndex("BookChapterVerse")
                        .HasDatabaseName("ix_verse_rows_book_chapter_verse");

                    b.HasIndex("TokenizedCorpusId")
                        .HasDatabaseName("ix_verse_rows_tokenized_corpus_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_verse_rows_user_id");

                    b.ToTable("verse_rows", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.TokenComponent");

                    b.Property<int>("BookNumber")
                        .HasColumnType("integer")
                        .HasColumnName("book_number");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("integer")
                        .HasColumnName("chapter_number");

                    b.Property<string>("OriginTokenLocation")
                        .HasColumnType("text")
                        .HasColumnName("origin_token_location");

                    b.Property<int>("SubwordNumber")
                        .HasColumnType("integer")
                        .HasColumnName("subword_number");

                    b.Property<int>("VerseNumber")
                        .HasColumnType("integer")
                        .HasColumnName("verse_number");

                    b.Property<int>("WordNumber")
                        .HasColumnType("integer")
                        .HasColumnName("word_number");

                    b.HasIndex("BookNumber")
                        .HasDatabaseName("ix_token_components_book_number");

                    b.HasIndex("ChapterNumber")
                        .HasDatabaseName("ix_token_components_chapter_number");

                    b.HasIndex("OriginTokenLocation")
                        .HasDatabaseName("ix_token_components_origin_token_location");

                    b.HasIndex("VerseNumber")
                        .HasDatabaseName("ix_token_components_verse_number");

                    b.ToTable("token_components", (string)null);

                    b.HasDiscriminator().HasValue("Token");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComposite", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.TokenComponent");

                    b.Property<Guid?>("ParallelCorpusId")
                        .HasColumnType("uuid")
                        .HasColumnName("parallel_corpus_id");

                    b.HasIndex("ParallelCorpusId")
                        .HasDatabaseName("ix_token_components_parallel_corpus_id");

                    b.ToTable("token_components", (string)null);

                    b.HasDiscriminator().HasValue("TokenComposite");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithOne("Adornment")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Adornment", "TokenId")
                        .HasConstraintName("fk_adornments_tokens_token_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_adornments_users_user_id");

                    b.Navigation("Token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentSet", "AlignmentSet")
                        .WithMany("Alignments")
                        .HasForeignKey("AlignmentSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alignments_alignment_sets_alignment_set_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComponent", "SourceTokenComponent")
                        .WithMany("SourceAlignments")
                        .HasForeignKey("SourceTokenComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alignments_token_components_source_token_component_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComponent", "TargetTokenComponent")
                        .WithMany("TargetAlignments")
                        .HasForeignKey("TargetTokenComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alignments_token_components_target_token_component_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alignments_users_user_id");

                    b.Navigation("AlignmentSet");

                    b.Navigation("SourceTokenComponent");

                    b.Navigation("TargetTokenComponent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentSet", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", null)
                        .WithMany("AlignmentSets")
                        .HasForeignKey("ParallelCorpusHistoryId")
                        .HasConstraintName("fk_alignment_sets_parallel_corpa_history_parallel_corpus_histo");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("AlignmentSets")
                        .HasForeignKey("ParallelCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alignment_sets_parallel_corpa_parallel_corpus_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany("AlignmentSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alignment_sets_users_user_id");

                    b.Navigation("ParallelCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentSetDenormalizationTask", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentSet", "AlignmentSet")
                        .WithMany()
                        .HasForeignKey("AlignmentSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alignment_set_denormalization_tasks_alignment_sets_alignmen");

                    b.Navigation("AlignmentSet");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentTopTargetTrainingText", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentSet", "AlignmentSet")
                        .WithMany()
                        .HasForeignKey("AlignmentSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alignment_top_target_training_texts_alignment_sets_alignmen");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComponent", "SourceTokenComponent")
                        .WithMany()
                        .HasForeignKey("SourceTokenComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alignment_top_target_training_texts_token_components_source");

                    b.Navigation("AlignmentSet");

                    b.Navigation("SourceTokenComponent");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_corpa_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.CorpusHistory", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_corpa_history_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.LabelGroupAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.LabelGroup", "LabelGroup")
                        .WithMany("LabelGroupAssociations")
                        .HasForeignKey("LabelGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_label_group_associations_label_groups_label_group_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Label", "Label")
                        .WithMany("LabelGroupAssociations")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_label_group_associations_labels_label_id");

                    b.Navigation("Label");

                    b.Navigation("LabelGroup");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.LabelNoteAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Label", "Label")
                        .WithMany("LabelNoteAssociations")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_label_note_associations_labels_label_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", "Note")
                        .WithMany("LabelNoteAssociations")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_label_note_associations_notes_note_id");

                    b.Navigation("Label");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_Form", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Lexicon_Lexeme", "Lexeme")
                        .WithMany("Forms")
                        .HasForeignKey("LexemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lexicon_forms_lexicon_lexemes_lexeme_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lexicon_forms_users_user_id");

                    b.Navigation("Lexeme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_Lexeme", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lexicon_lexemes_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_Meaning", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Lexicon_Lexeme", "Lexeme")
                        .WithMany("Meanings")
                        .HasForeignKey("LexemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lexicon_meanings_lexicon_lexemes_lexeme_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lexicon_meanings_users_user_id");

                    b.Navigation("Lexeme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_SemanticDomain", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lexicon_semantic_domains_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_SemanticDomainMeaningAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Lexicon_Meaning", "Meaning")
                        .WithMany("SemanticDomainMeaningAssociations")
                        .HasForeignKey("MeaningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lexicon_semantic_domain_meaning_associations_lexicon_meanin");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Lexicon_SemanticDomain", "SemanticDomain")
                        .WithMany("SemanticDomainMeaningAssociations")
                        .HasForeignKey("SemanticDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lexicon_semantic_domain_meaning_associations_lexicon_semant");

                    b.Navigation("Meaning");

                    b.Navigation("SemanticDomain");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_Translation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Lexicon_Meaning", "Meaning")
                        .WithMany("Translations")
                        .HasForeignKey("MeaningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lexicon_translations_lexicon_meanings_meaning_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lexicon_translations_users_user_id");

                    b.Navigation("Meaning");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Note", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notes_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteDomainEntityAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", "Note")
                        .WithMany("NoteDomainEntityAssociations")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_note_domain_entity_associations_notes_note_id");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteRecipient", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", null)
                        .WithMany("NoteRecipients")
                        .HasForeignKey("NoteId")
                        .HasConstraintName("fk_note_recipient_notes_note_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_note_recipient_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteUserSeenAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", "Note")
                        .WithMany("NoteUserSeenAssociations")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_note_user_seen_associations_notes_note_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_note_user_seen_associations_users_user_id");

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "SourceTokenizedCorpus")
                        .WithMany("SourceParallelCorpora")
                        .HasForeignKey("SourceTokenizedCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parallel_corpa_tokenized_corpora_source_tokenized_corpus_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "TargetTokenizedCorpus")
                        .WithMany("TargetParallelCorpora")
                        .HasForeignKey("TargetTokenizedCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parallel_corpa_tokenized_corpora_target_tokenized_corpus_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parallel_corpa_users_user_id");

                    b.Navigation("SourceTokenizedCorpus");

                    b.Navigation("TargetTokenizedCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "SourceTokenizedCorpus")
                        .WithMany()
                        .HasForeignKey("SourceTokenizedCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parallel_corpa_history_tokenized_corpora_source_tokenized_c");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "TargetTokenizedCorpus")
                        .WithMany()
                        .HasForeignKey("TargetTokenizedCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parallel_corpa_history_tokenized_corpora_target_tokenized_c");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parallel_corpa_history_users_user_id");

                    b.Navigation("SourceTokenizedCorpus");

                    b.Navigation("TargetTokenizedCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Project", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComponent", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "TokenizedCorpus")
                        .WithMany("TokenComponents")
                        .HasForeignKey("TokenizedCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_token_components_tokenized_corpora_tokenized_corpus_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.VerseRow", "VerseRow")
                        .WithMany("TokenComponents")
                        .HasForeignKey("VerseRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_token_components_verse_rows_verse_row_id");

                    b.Navigation("TokenizedCorpus");

                    b.Navigation("VerseRow");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenCompositeTokenAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComposite", "TokenComposite")
                        .WithMany("TokenCompositeTokenAssociations")
                        .HasForeignKey("TokenCompositeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_token_composite_token_associations_token_composites_token_c");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithMany("TokenCompositeTokenAssociations")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_token_composite_token_associations_tokens_token_id");

                    b.Navigation("Token");

                    b.Navigation("TokenComposite");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenVerseAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComponent", "TokenComponent")
                        .WithMany("TokenVerseAssociations")
                        .HasForeignKey("TokenComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_token_verse_associations_token_components_token_component_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_token_verse_associations_users_user_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Verse", "Verse")
                        .WithMany("TokenVerseAssociations")
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_token_verse_associations_verses_verse_id");

                    b.Navigation("TokenComponent");

                    b.Navigation("User");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.CorpusHistory", "CorpusHistory")
                        .WithMany("TokenizedCorpora")
                        .HasForeignKey("CorpusHistoryId")
                        .HasConstraintName("fk_tokenized_corpora_corpa_history_corpus_history_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "Corpus")
                        .WithMany("TokenizedCorpora")
                        .HasForeignKey("CorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tokenized_corpora_corpa_corpus_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tokenized_corpora_users_user_id");

                    b.Navigation("Corpus");

                    b.Navigation("CorpusHistory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Translation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Lexicon_Translation", "LexiconTranslation")
                        .WithMany()
                        .HasForeignKey("LexiconTranslationId")
                        .HasConstraintName("fk_translations_lexicon_translations_lexicon_translation_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComponent", "SourceTokenComponent")
                        .WithMany("Translations")
                        .HasForeignKey("SourceTokenComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translations_token_components_source_token_component_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TranslationSet", "TranslationSet")
                        .WithMany("Translations")
                        .HasForeignKey("TranslationSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translations_translation_sets_translation_set_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translations_users_user_id");

                    b.Navigation("LexiconTranslation");

                    b.Navigation("SourceTokenComponent");

                    b.Navigation("TranslationSet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationModelEntry", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TranslationSet", "TranslationSet")
                        .WithMany("TranslationModel")
                        .HasForeignKey("TranslationSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translation_model_entries_translation_sets_translation_set_");

                    b.Navigation("TranslationSet");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationModelTargetTextScore", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TranslationModelEntry", "TranslationModelEntry")
                        .WithMany("TargetTextScores")
                        .HasForeignKey("TranslationModelEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translation_model_target_text_score_translation_model_entri");

                    b.Navigation("TranslationModelEntry");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationSet", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentSet", "AlignmentSet")
                        .WithMany()
                        .HasForeignKey("AlignmentSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translation_sets_alignment_sets_alignment_set_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TranslationSet", "DerivedFrom")
                        .WithMany()
                        .HasForeignKey("DerivedFromId")
                        .HasConstraintName("fk_translation_sets_translation_sets_derived_from_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", null)
                        .WithMany("TranslationSets")
                        .HasForeignKey("ParallelCorpusHistoryId")
                        .HasConstraintName("fk_translation_sets_parallel_corpa_history_parallel_corpus_his");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("TranslationSets")
                        .HasForeignKey("ParallelCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translation_sets_parallel_corpa_parallel_corpus_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany("TranslationSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translation_sets_users_user_id");

                    b.Navigation("AlignmentSet");

                    b.Navigation("DerivedFrom");

                    b.Navigation("ParallelCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.CorpusHistory", null)
                        .WithMany("Verses")
                        .HasForeignKey("CorpusHistoryId")
                        .HasConstraintName("fk_verses_corpa_history_corpus_history_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "Corpus")
                        .WithMany()
                        .HasForeignKey("CorpusId")
                        .HasConstraintName("fk_verses_corpa_corpus_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany()
                        .HasForeignKey("ParallelCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_verses_parallel_corpa_parallel_corpus_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_verses_users_user_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.VerseMapping", "VerseMapping")
                        .WithMany("Verses")
                        .HasForeignKey("VerseMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_verses_verse_mappings_verse_mapping_id");

                    b.Navigation("Corpus");

                    b.Navigation("ParallelCorpus");

                    b.Navigation("User");

                    b.Navigation("VerseMapping");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseMapping", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", null)
                        .WithMany("VerseMappings")
                        .HasForeignKey("ParallelCorpusHistoryId")
                        .HasConstraintName("fk_verse_mappings_parallel_corpa_history_parallel_corpus_histo");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("VerseMappings")
                        .HasForeignKey("ParallelCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_verse_mappings_parallel_corpa_parallel_corpus_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_verse_mappings_users_user_id");

                    b.Navigation("ParallelCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseRow", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "TokenizedCorpus")
                        .WithMany("VerseRows")
                        .HasForeignKey("TokenizedCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_verse_rows_tokenized_corpora_tokenized_corpus_id");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_verse_rows_users_user_id");

                    b.Navigation("TokenizedCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComposite", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("TokenComposites")
                        .HasForeignKey("ParallelCorpusId")
                        .HasConstraintName("fk_token_components_parallel_corpa_parallel_corpus_id");

                    b.Navigation("ParallelCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentSet", b =>
                {
                    b.Navigation("Alignments");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Navigation("TokenizedCorpora");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.CorpusHistory", b =>
                {
                    b.Navigation("TokenizedCorpora");

                    b.Navigation("Verses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Label", b =>
                {
                    b.Navigation("LabelGroupAssociations");

                    b.Navigation("LabelNoteAssociations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.LabelGroup", b =>
                {
                    b.Navigation("LabelGroupAssociations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_Lexeme", b =>
                {
                    b.Navigation("Forms");

                    b.Navigation("Meanings");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_Meaning", b =>
                {
                    b.Navigation("SemanticDomainMeaningAssociations");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Lexicon_SemanticDomain", b =>
                {
                    b.Navigation("SemanticDomainMeaningAssociations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Note", b =>
                {
                    b.Navigation("LabelNoteAssociations");

                    b.Navigation("NoteDomainEntityAssociations");

                    b.Navigation("NoteRecipients");

                    b.Navigation("NoteUserSeenAssociations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Navigation("AlignmentSets");

                    b.Navigation("TokenComposites");

                    b.Navigation("TranslationSets");

                    b.Navigation("VerseMappings");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", b =>
                {
                    b.Navigation("AlignmentSets");

                    b.Navigation("TranslationSets");

                    b.Navigation("VerseMappings");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComponent", b =>
                {
                    b.Navigation("SourceAlignments");

                    b.Navigation("TargetAlignments");

                    b.Navigation("TokenVerseAssociations");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", b =>
                {
                    b.Navigation("SourceParallelCorpora");

                    b.Navigation("TargetParallelCorpora");

                    b.Navigation("TokenComponents");

                    b.Navigation("VerseRows");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationModelEntry", b =>
                {
                    b.Navigation("TargetTextScores");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationSet", b =>
                {
                    b.Navigation("TranslationModel");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("AlignmentSets");

                    b.Navigation("TranslationSets");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.Navigation("TokenVerseAssociations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseMapping", b =>
                {
                    b.Navigation("Verses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseRow", b =>
                {
                    b.Navigation("TokenComponents");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.Navigation("Adornment");

                    b.Navigation("TokenCompositeTokenAssociations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComposite", b =>
                {
                    b.Navigation("TokenCompositeTokenAssociations");
                });
#pragma warning restore 612, 618
        }
    }
}
