// <auto-generated />
using System;
using ClearDashboard.DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClearDashboard.DataAccessLayer.Data.Migrations
{
    [DbContext(typeof(AlignmentContext))]
    partial class AlignmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lemma")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartsOfSpeech")
                        .HasColumnType("TEXT");

                    b.Property<string>("Strong")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TokenId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("Adornment");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlignmentType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlignmentVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Score")
                        .HasColumnType("TEXT");

                    b.Property<int>("SourceTokenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetTokenId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlignmentVersionId");

                    b.HasIndex("SourceTokenId");

                    b.HasIndex("TargetTokenId");

                    b.ToTable("Alignment");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AlignmentVersion");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorpusType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParatextGuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Corpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.DataAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssociationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssociationType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("DataAssociation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TokenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("InterlinearNote");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Modified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlignmentType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastGenerated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceCorpusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetCorpusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceCorpusId");

                    b.HasIndex("TargetCorpusId");

                    b.ToTable("ParallelCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVersesLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParallelCorpusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VerseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParallelCorpusId");

                    b.HasIndex("VerseId");

                    b.ToTable("ParallelVersesLink");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ProjectInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastContentWordLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectInfo");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.QuestionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AltText")
                        .HasColumnType("TEXT");

                    b.Property<string>("English")
                        .HasColumnType("TEXT");

                    b.Property<double>("LastChanged")
                        .HasColumnType("REAL");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QuestionGroup");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.RawContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Bytes")
                        .HasColumnType("BLOB");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("RawContent");

                    b.HasDiscriminator<string>("ContentType").HasValue("RawContent");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.RecipientNoteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NoteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("UserId");

                    b.ToTable("RecipientNoteUser");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstLetter")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubwordNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<int>("VerseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VerseId")
                        .IsUnique();

                    b.ToTable("Token");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastAlignmentLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParatextUsername")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChapterNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CorpusId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Found")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Modified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SilBookNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerseBBCCCVVV")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VerseNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerseText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorpusId");

                    b.ToTable("Verse");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSource")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParallelVersesLinkId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VerseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParallelVersesLinkId");

                    b.HasIndex("VerseId");

                    b.ToTable("VerseLink");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.BinaryContent", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.RawContent");

                    b.HasDiscriminator().HasValue("BinaryContent");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.StringContent", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.RawContent");

                    b.HasDiscriminator().HasValue("StringContent");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithOne("Adornment")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Adornment", "TokenId");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", "AlignmentVersion")
                        .WithMany("Alignments")
                        .HasForeignKey("AlignmentVersionId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "SourceToken")
                        .WithMany()
                        .HasForeignKey("SourceTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "TargetToken")
                        .WithMany()
                        .HasForeignKey("TargetTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlignmentVersion");

                    b.Navigation("SourceToken");

                    b.Navigation("TargetToken");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany("AlignmentVersions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.DataAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", null)
                        .WithMany("Associations")
                        .HasForeignKey("NoteId");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithMany("InterlinearNotes")
                        .HasForeignKey("TokenId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithOne("UserNavigation")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.InterlinearNote", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Note", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "SourceCorpus")
                        .WithMany()
                        .HasForeignKey("SourceCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "TargetCorpus")
                        .WithMany()
                        .HasForeignKey("TargetCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceCorpus");

                    b.Navigation("TargetCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVersesLink", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("ParallelVersesLinks")
                        .HasForeignKey("ParallelCorpusId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Verse", null)
                        .WithMany("ParallelVersesLinks")
                        .HasForeignKey("VerseId");

                    b.Navigation("ParallelCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.RawContent", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", null)
                        .WithMany("ContentCollection")
                        .HasForeignKey("NoteId");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.RecipientNoteUser", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", null)
                        .WithMany("RecipientNoteUsers")
                        .HasForeignKey("NoteId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Verse", "Verse")
                        .WithOne("Token")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Token", "VerseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "Corpus")
                        .WithMany("Verses")
                        .HasForeignKey("CorpusId");

                    b.Navigation("Corpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseLink", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelVersesLink", "ParallelVersesLink")
                        .WithMany("VerseLinks")
                        .HasForeignKey("ParallelVersesLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Verse", "Verse")
                        .WithMany()
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParallelVersesLink");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.Navigation("Alignments");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Navigation("Verses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Note", b =>
                {
                    b.Navigation("Associations");

                    b.Navigation("ContentCollection");

                    b.Navigation("RecipientNoteUsers");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Navigation("ParallelVersesLinks");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVersesLink", b =>
                {
                    b.Navigation("VerseLinks");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.Navigation("Adornment");

                    b.Navigation("InterlinearNotes");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("AlignmentVersions");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.Navigation("ParallelVersesLinks");

                    b.Navigation("Token");
                });
#pragma warning restore 612, 618
        }
    }
}
