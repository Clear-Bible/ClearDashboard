// <auto-generated />
using System;
using ClearDashboard.DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClearDashboard.DataAccessLayer.Data.Migrations
{
    [DbContext(typeof(AlignmentContext))]
    [Migration("20220415161509_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lemma")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PartsOfSpeech")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Strong")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("TokenId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("Adornment", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlignmentType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlignmentVersionId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(3)");

                    b.Property<int>("SourceTokenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetTokenId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlignmentVersionId");

                    b.HasIndex("SourceTokenId")
                        .IsUnique();

                    b.HasIndex("TargetTokenId")
                        .IsUnique();

                    b.ToTable("Alignment", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AlignmentVersion", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorpusType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("bit")
                        .HasColumnName("IsRTL");

                    b.Property<int?>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParatextGuid")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ParatextGUID");

                    b.HasKey("Id");

                    b.ToTable("Corpus", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("varchar(600)");

                    b.Property<int?>("TokenId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("InterlinearNotes");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlignmentType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastGenerated")
                        .HasColumnType("datetime");

                    b.Property<int>("SourceCorpusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetCorpusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceCorpusId")
                        .IsUnique();

                    b.HasIndex("TargetCorpusId")
                        .IsUnique();

                    b.ToTable("ParallelCorpus", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVersesLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParallelCorpusId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VerseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParallelCorpusId");

                    b.HasIndex("VerseId");

                    b.ToTable("ParallelVerseLink", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ProjectInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("bit")
                        .HasColumnName("IsRTL");

                    b.Property<int?>("LastContentWordLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectInfo", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.QuestionGroup", b =>
                {
                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("LastChanged")
                        .HasColumnType("REAL");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("QuestionGroup", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstLetter")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.Property<int>("SubwordNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("VerseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VerseId")
                        .IsUnique();

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastAlignmentLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParatextUsername")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChapterNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CorpusId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<string>("SilBookNumber")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.Property<string>("VerseNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VerseText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CorpusId");

                    b.ToTable("Verse", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSource")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParallelVersesLinkId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VerseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParallelVersesLinkId");

                    b.HasIndex("VerseId");

                    b.ToTable("VerseLink", (string)null);
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithOne("Adornment")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Adornment", "TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", "AlignmentVersion")
                        .WithMany("Alignments")
                        .HasForeignKey("AlignmentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "SourceToken")
                        .WithMany()
                        .HasForeignKey("SourceTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "TargetToken")
                        .WithMany()
                        .HasForeignKey("TargetTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlignmentVersion");

                    b.Navigation("SourceToken");

                    b.Navigation("TargetToken");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany("AlignmentVersions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithMany("InterlinearNotes")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "SourceCorpus")
                        .WithMany()
                        .HasForeignKey("SourceCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "TargetCorpus")
                        .WithMany()
                        .HasForeignKey("TargetCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceCorpus");

                    b.Navigation("TargetCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVersesLink", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("ParallelVersesLinks")
                        .HasForeignKey("ParallelCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Verse", null)
                        .WithMany("ParallelVersesLinks")
                        .HasForeignKey("VerseId");

                    b.Navigation("ParallelCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Verse", "Verse")
                        .WithOne("Token")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Token", "VerseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.InterlinearNote", "UserNavigation")
                        .WithOne("User")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.User", "Id")
                        .HasPrincipalKey("ClearDashboard.DataAccessLayer.Models.InterlinearNote", "UserId")
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "Corpus")
                        .WithMany("Verses")
                        .HasForeignKey("CorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseLink", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelVersesLink", "ParallelVersesLink")
                        .WithMany("VerseLinks")
                        .HasForeignKey("ParallelVersesLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Verse", "Verse")
                        .WithMany()
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParallelVersesLink");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentVersion", b =>
                {
                    b.Navigation("Alignments");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Navigation("Verses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.InterlinearNote", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Navigation("ParallelVersesLinks");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelVersesLink", b =>
                {
                    b.Navigation("VerseLinks");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.Navigation("Adornment")
                        .IsRequired();

                    b.Navigation("InterlinearNotes");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("AlignmentVersions");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.Navigation("ParallelVersesLinks");

                    b.Navigation("Token")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
