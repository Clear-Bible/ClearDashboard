// <auto-generated />
using System;
using ClearDashboard.DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClearDashboard.DataAccessLayer.Data.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    partial class ProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lemma")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartsOfSpeech")
                        .HasColumnType("TEXT");

                    b.Property<string>("Strong")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TokenId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenMorphology")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Adornment");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AlignmentOriginatedFrom")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("AlignmentSetId")
                        .HasColumnType("TEXT");

                    b.Property<int>("AlignmentVerification")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.Property<Guid>("SourceTokenComponentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SourceTokenId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TargetTokenComponentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TargetTokenId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlignmentSetId");

                    b.HasIndex("SourceTokenId");

                    b.HasIndex("TargetTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("Alignment");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EngineWordAlignmentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSyntaxTreeAlignerRefined")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("ParallelCorpusHistoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParallelCorpusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmtModel")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EngineWordAlignmentId");

                    b.HasIndex("ParallelCorpusHistoryId");

                    b.HasIndex("ParallelCorpusId");

                    b.HasIndex("UserId");

                    b.ToTable("AlignmentSet");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CorpusType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParatextGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Corpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.CorpusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CorpusType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParatextGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CorpusHistory");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.EngineWordAlignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsClearAligner")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SmtWordAlignerType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EngineWordAlignment");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.LabelNoteAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("NoteId");

                    b.ToTable("LabelNoteAssociation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AbbreviatedText")
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Modified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssociationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssociationType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NoteAssociation");

                    b.HasDiscriminator<string>("AssociationType").HasValue("NoteAssociation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteDomainEntityAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DomainEntityIdGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainEntityIdName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("NoteDomainEntityAssociation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("UserId");

                    b.ToTable("NoteRecipient");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("SourceTokenizedCorpusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TargetTokenizedCorpusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SourceTokenizedCorpusId");

                    b.HasIndex("TargetTokenizedCorpusId");

                    b.HasIndex("UserId");

                    b.ToTable("ParallelCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("SourceTokenizedCorpusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TargetTokenizedCorpusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SourceTokenizedCorpusId");

                    b.HasIndex("TargetTokenizedCorpusId");

                    b.HasIndex("UserId");

                    b.ToTable("ParallelCorpusHistory");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DesignSurfaceLayout")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.RawContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Bytes")
                        .HasColumnType("BLOB");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("RawContent");

                    b.HasDiscriminator<string>("ContentType").HasValue("RawContent");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EngineTokenId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TokenizationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrainingText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EngineTokenId");

                    b.HasIndex("TokenizationId");

                    b.ToTable("TokenComponent");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TokenComponent");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CorpusHistoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CorpusId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomVersData")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("ScrVersType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TokenizationFunction")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorpusHistoryId");

                    b.HasIndex("CorpusId");

                    b.HasIndex("UserId");

                    b.ToTable("TokenizedCorpus");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenVerseAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TokenComponentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VerseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TokenComponentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VerseId");

                    b.ToTable("TokenVerseAssociation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SourceTokenComponentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SourceTokenId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetText")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TranslationSetId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TranslationState")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SourceTokenId");

                    b.HasIndex("TranslationSetId");

                    b.HasIndex("UserId");

                    b.ToTable("Translation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationModelEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceText")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TranslationSetId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TranslationSetId", "SourceText")
                        .IsUnique();

                    b.ToTable("TranslationModelEntry");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationModelTargetTextScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TranslationModelEntryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TranslationModelEntryId", "Text")
                        .IsUnique();

                    b.ToTable("TranslationModelTargetTextScore");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("DerivedFromId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EngineWordAlignmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("ParallelCorpusHistoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParallelCorpusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmtModel")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DerivedFromId");

                    b.HasIndex("EngineWordAlignmentId");

                    b.HasIndex("ParallelCorpusHistoryId");

                    b.HasIndex("ParallelCorpusId");

                    b.HasIndex("UserId");

                    b.ToTable("TranslationSet");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastAlignmentLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("BookNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChapterNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CorpusHistoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CorpusId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerseBBBCCCVVV")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VerseMappingId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VerseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VerseText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorpusHistoryId");

                    b.HasIndex("CorpusId");

                    b.HasIndex("UserId");

                    b.HasIndex("VerseMappingId");

                    b.ToTable("Verse");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ParallelCorpusHistoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParallelCorpusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParallelCorpusHistoryId");

                    b.HasIndex("ParallelCorpusId");

                    b.HasIndex("UserId");

                    b.ToTable("VerseMapping");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentAssociation", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.NoteAssociation");

                    b.HasDiscriminator().HasValue("AlignmentAssociation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.BinaryContent", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.RawContent");

                    b.HasDiscriminator().HasValue("BinaryContent");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.BookAssociation", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.NoteAssociation");

                    b.HasDiscriminator().HasValue("BookAssociation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ChapterAssociation", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.NoteAssociation");

                    b.HasDiscriminator().HasValue("ChapterAssociation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.StringContent", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.RawContent");

                    b.HasDiscriminator().HasValue("StringContent");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.TokenComponent");

                    b.Property<int>("BookNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubwordNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SurfaceText")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TokenCompositeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("VerseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordNumber")
                        .HasColumnType("INTEGER");

                    b.HasIndex("BookNumber");

                    b.HasIndex("ChapterNumber");

                    b.HasIndex("SubwordNumber");

                    b.HasIndex("TokenCompositeId");

                    b.HasIndex("VerseNumber");

                    b.HasIndex("WordNumber");

                    b.ToTable("TokenComponent", (string)null);

                    b.HasDiscriminator().HasValue("Token");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenAssociation", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.NoteAssociation");

                    b.HasDiscriminator().HasValue("TokenAssociation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComposite", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.TokenComponent");

                    b.ToTable("TokenComponent", (string)null);

                    b.HasDiscriminator().HasValue("TokenComposite");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseAssociation", b =>
                {
                    b.HasBaseType("ClearDashboard.DataAccessLayer.Models.NoteAssociation");

                    b.HasDiscriminator().HasValue("VerseAssociation");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Adornment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Token", "Token")
                        .WithOne("Adornment")
                        .HasForeignKey("ClearDashboard.DataAccessLayer.Models.Adornment", "TokenId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Alignment", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.AlignmentSet", "AlignmentSet")
                        .WithMany("Alignments")
                        .HasForeignKey("AlignmentSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComponent", "SourceTokenComponent")
                        .WithMany("SourceAlignments")
                        .HasForeignKey("SourceTokenId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComponent", "TargetTokenComponent")
                        .WithMany("TargetAlignments")
                        .HasForeignKey("TargetTokenId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlignmentSet");

                    b.Navigation("SourceTokenComponent");

                    b.Navigation("TargetTokenComponent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentSet", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.EngineWordAlignment", "EngineWordAlignment")
                        .WithMany()
                        .HasForeignKey("EngineWordAlignmentId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", null)
                        .WithMany("AlignmentSets")
                        .HasForeignKey("ParallelCorpusHistoryId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("AlignmentSets")
                        .HasForeignKey("ParallelCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany("AlignmentSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngineWordAlignment");

                    b.Navigation("ParallelCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.CorpusHistory", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.LabelNoteAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Label", "Label")
                        .WithMany("LabelNoteAssociations")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", "Note")
                        .WithMany("LabelNoteAssociations")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Note", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteDomainEntityAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", "Note")
                        .WithMany("NoteDomainEntityAssociations")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.NoteRecipient", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", null)
                        .WithMany("NoteRecipients")
                        .HasForeignKey("NoteId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "SourceTokenizedCorpus")
                        .WithMany("SourceParallelCorpora")
                        .HasForeignKey("SourceTokenizedCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "TargetTokenizedCorpus")
                        .WithMany("TargetParallelCorpora")
                        .HasForeignKey("TargetTokenizedCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceTokenizedCorpus");

                    b.Navigation("TargetTokenizedCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "SourceTokenizedCorpus")
                        .WithMany()
                        .HasForeignKey("SourceTokenizedCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "TargetTokenizedCorpus")
                        .WithMany()
                        .HasForeignKey("TargetTokenizedCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceTokenizedCorpus");

                    b.Navigation("TargetTokenizedCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Project", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.RawContent", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Note", null)
                        .WithMany("ContentCollection")
                        .HasForeignKey("NoteId");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComponent", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", "Tokenization")
                        .WithMany("TokenComponents")
                        .HasForeignKey("TokenizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tokenization");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.CorpusHistory", "CorpusHistory")
                        .WithMany("TokenizedCorpora")
                        .HasForeignKey("CorpusHistoryId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "Corpus")
                        .WithMany("TokenizedCorpora")
                        .HasForeignKey("CorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corpus");

                    b.Navigation("CorpusHistory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenVerseAssociation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComponent", "TokenComponent")
                        .WithMany("TokenVerseAssociations")
                        .HasForeignKey("TokenComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Verse", "Verse")
                        .WithMany("TokenVerseAssociations")
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TokenComponent");

                    b.Navigation("User");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Translation", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComponent", "SourceTokenComponent")
                        .WithMany("Translations")
                        .HasForeignKey("SourceTokenId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TranslationSet", "TranslationSet")
                        .WithMany("Translations")
                        .HasForeignKey("TranslationSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceTokenComponent");

                    b.Navigation("TranslationSet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationModelEntry", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TranslationSet", "TranslationSet")
                        .WithMany("TranslationModel")
                        .HasForeignKey("TranslationSetId");

                    b.Navigation("TranslationSet");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationModelTargetTextScore", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TranslationModelEntry", "TranslationModelEntry")
                        .WithMany("TargetTextScores")
                        .HasForeignKey("TranslationModelEntryId");

                    b.Navigation("TranslationModelEntry");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationSet", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TranslationSet", "DerivedFrom")
                        .WithMany()
                        .HasForeignKey("DerivedFromId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.EngineWordAlignment", "EngineWordAlignment")
                        .WithMany()
                        .HasForeignKey("EngineWordAlignmentId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", null)
                        .WithMany("TranslationSets")
                        .HasForeignKey("ParallelCorpusHistoryId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("TranslationSets")
                        .HasForeignKey("ParallelCorpusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany("TranslationSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DerivedFrom");

                    b.Navigation("EngineWordAlignment");

                    b.Navigation("ParallelCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.CorpusHistory", null)
                        .WithMany("Verses")
                        .HasForeignKey("CorpusHistoryId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.Corpus", "Corpus")
                        .WithMany("Verses")
                        .HasForeignKey("CorpusId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.VerseMapping", "VerseMapping")
                        .WithMany("Verses")
                        .HasForeignKey("VerseMappingId");

                    b.Navigation("Corpus");

                    b.Navigation("User");

                    b.Navigation("VerseMapping");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseMapping", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", null)
                        .WithMany("VerseMappings")
                        .HasForeignKey("ParallelCorpusHistoryId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", "ParallelCorpus")
                        .WithMany("VerseMappings")
                        .HasForeignKey("ParallelCorpusId");

                    b.HasOne("ClearDashboard.DataAccessLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParallelCorpus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.HasOne("ClearDashboard.DataAccessLayer.Models.TokenComposite", "TokenComposite")
                        .WithMany("Tokens")
                        .HasForeignKey("TokenCompositeId");

                    b.Navigation("TokenComposite");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.AlignmentSet", b =>
                {
                    b.Navigation("Alignments");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Corpus", b =>
                {
                    b.Navigation("TokenizedCorpora");

                    b.Navigation("Verses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.CorpusHistory", b =>
                {
                    b.Navigation("TokenizedCorpora");

                    b.Navigation("Verses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Label", b =>
                {
                    b.Navigation("LabelNoteAssociations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Note", b =>
                {
                    b.Navigation("ContentCollection");

                    b.Navigation("LabelNoteAssociations");

                    b.Navigation("NoteDomainEntityAssociations");

                    b.Navigation("NoteRecipients");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpus", b =>
                {
                    b.Navigation("AlignmentSets");

                    b.Navigation("TranslationSets");

                    b.Navigation("VerseMappings");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.ParallelCorpusHistory", b =>
                {
                    b.Navigation("AlignmentSets");

                    b.Navigation("TranslationSets");

                    b.Navigation("VerseMappings");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComponent", b =>
                {
                    b.Navigation("SourceAlignments");

                    b.Navigation("TargetAlignments");

                    b.Navigation("TokenVerseAssociations");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenizedCorpus", b =>
                {
                    b.Navigation("SourceParallelCorpora");

                    b.Navigation("TargetParallelCorpora");

                    b.Navigation("TokenComponents");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationModelEntry", b =>
                {
                    b.Navigation("TargetTextScores");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TranslationSet", b =>
                {
                    b.Navigation("TranslationModel");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("AlignmentSets");

                    b.Navigation("TranslationSets");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Verse", b =>
                {
                    b.Navigation("TokenVerseAssociations");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.VerseMapping", b =>
                {
                    b.Navigation("Verses");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.Token", b =>
                {
                    b.Navigation("Adornment");
                });

            modelBuilder.Entity("ClearDashboard.DataAccessLayer.Models.TokenComposite", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
