<UserControl x:Class="ClearDashboard.Wpf.Application.Views.EnhancedView.VerseAwareEnhancedViewItemView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ClearDashboard.Wpf.Application.Views.EnhancedView"
             xmlns:converters="clr-namespace:ClearDashboard.Wpf.Application.Converters"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:userControls="clr-namespace:ClearDashboard.Wpf.Application.UserControls"
             xmlns:enhancedView="clr-namespace:ClearDashboard.Wpf.Application.ViewModels.EnhancedView"
             xmlns:cm="http://caliburnmicro.com"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=enhancedView:VerseAwareEnhancedViewItemViewModel}"
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <ResourceDictionary>
            <converters:BoolOrientationConverter x:Key="BoolOrientationConverter" />
            <!--<converters:BoolFlowDirectionConverter x:Key="BoolFlowDirectionConverter" />-->
            <converters:BoolHorizontalAlignmentConverter x:Key="BoolHorizontalAlignmentConverter" />
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        

        <ListView
        x:Name="InnerListView"
        Width="{Binding ActualWidth, ElementName=DisplayColumn, Converter={converters:WidthSubtraction}, ConverterParameter='10'}"
        HorizontalAlignment="Stretch"
        HorizontalContentAlignment="Stretch"
        ItemsSource="{Binding Verses}"
        ScrollViewer.HorizontalScrollBarVisibility="Disabled"
        ScrollViewer.IsDeferredScrollingEnabled="True"
        VirtualizingStackPanel.IsVirtualizing="True"
        VirtualizingStackPanel.VirtualizationMode="Recycling"
        cm:Message.Attach="[Event SelectionChanged] = [Action VerseSelected($this, $eventArgs)]">
            <ListView.ItemContainerStyle>
                <Style TargetType="{x:Type ListViewItem}">
                    <Setter Property="Height" Value="Auto" />

                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="LightGreen" />
                            <Setter Property="IsSelected" Value="True" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="LightCoral" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ListView.ItemContainerStyle>

            <ListView.ItemTemplate>
                <DataTemplate>

                    <userControls:VerseDisplay
                                                    x:Name="VerseDisplay"
                                                    Title=""
                                                    Width="{Binding ActualWidth, ElementName=Border3, Converter={converters:WidthSubtraction}, ConverterParameter='40'}"
                                                    HorizontalSpacing="{Binding ElementName=HorizontalSpacingSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}"
                                                    IsEnabled="True"
                                                    NoteIndicatorHeight="{Binding ElementName=NoteIndicatorHeightSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}"
                                                    Orientation="{Binding ElementName=VerticalCheckbox, Path=IsChecked, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolOrientationConverter}}"
                                                    ShowNoteIndicators="{Binding ElementName=ShowNoteIndicatorsCheckbox, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"
                                                    ShowTranslations="{Binding DataContext.ShowTranslation, RelativeSource={RelativeSource AncestorType=ListView}}"
                                                    SourceFontFamily="{Binding ElementName=InnerListView, Path=DataContext.SourceFontFamily}"
                                                    SourceFontSize="{Binding ElementName=TokenFontSizeSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}"
                                                    TargetFontFamily="{Binding ElementName=InnerListView, Path=DataContext.TargetFontFamily}"
                                                    TitleFontSize="{Binding ElementName=TitleFontSizeSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}"
                                                    TitleVisibility="Collapsed"
                                                    TokenVerticalSpacing="{Binding ElementName=TokenVerticalSpacingSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}"
                                                    TranslationAlignment="{Binding ElementName=CenteredCheckbox, Path=IsChecked, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolHorizontalAlignmentConverter}}"
                                                    TranslationClicked="TranslationClicked"
                                                    TranslationFontFamily="{Binding ElementName=InnerListView, Path=DataContext.TranslationFontFamily}"
                                                    TranslationFontSize="{Binding ElementName=TranslationFontSizeSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}"
                                                    TranslationVerticalSpacing="{Binding ElementName=TranslationVerticalSpacingSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}"
                                                    Wrap="{Binding ElementName=WrapCheckbox, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}">
                                                    <!--cm:Message.Attach="[Event TranslationClicked] = [Action TranslationClicked($this, $eventArgs)]"-->
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="TokenClicked">
                                <b:CallMethodAction MethodName="TokenClicked" TargetObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:EnhancedView}}, Path=DataContext}" />
                            </b:EventTrigger>
                            <b:EventTrigger EventName="TokenRightButtonDown">
                                <b:CallMethodAction MethodName="TokenRightButtonDown" TargetObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:EnhancedView}}, Path=DataContext}" />
                            </b:EventTrigger>
                            <b:EventTrigger EventName="TokenMouseEnter">
                                <b:CallMethodAction MethodName="TokenMouseEnter" TargetObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:EnhancedView}}, Path=DataContext}" />
                            </b:EventTrigger>
                            <b:EventTrigger EventName="TokenMouseLeave">
                                <b:CallMethodAction MethodName="TokenMouseLeave" TargetObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:EnhancedView}}, Path=DataContext}" />
                            </b:EventTrigger>
                            <b:EventTrigger EventName="TranslationMouseEnter">
                                <b:CallMethodAction MethodName="TranslationMouseEnter" TargetObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:EnhancedView}}, Path=DataContext}" />
                            </b:EventTrigger>
                            <b:EventTrigger EventName="TranslationMouseLeave">
                                <b:CallMethodAction MethodName="TranslationMouseLeave" TargetObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:EnhancedView}}, Path=DataContext}" />
                            </b:EventTrigger>
                            <b:EventTrigger EventName="NoteIndicatorMouseEnter">
                                <b:CallMethodAction MethodName="NoteIndicatorMouseEnter" TargetObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:EnhancedView}}, Path=DataContext}" />
                            </b:EventTrigger>
                            <b:EventTrigger EventName="NoteCreate">
                                <b:CallMethodAction MethodName="NoteCreate" TargetObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:EnhancedView}}, Path=DataContext}" />
                            </b:EventTrigger>
                            <b:EventTrigger EventName="FilterPins">
                                <b:CallMethodAction MethodName="FilterPins" TargetObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:EnhancedView}}, Path=DataContext}" />
                            </b:EventTrigger>
                            <b:EventTrigger EventName="TranslateQuick">
                                <b:CallMethodAction MethodName="TranslateQuick" TargetObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:EnhancedView}}, Path=DataContext}" />
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </userControls:VerseDisplay>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>

        <ProgressBar
            Width="76"
            Height="75"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Foreground="{DynamicResource SecondaryHueMidBrush}"
            IsIndeterminate="True"
            Style="{StaticResource MaterialDesignCircularProgressBar}"
            Visibility="{Binding ProgressBarVisibility}"
            Value="0" />
    </Grid>

   
</UserControl>
