<UserControl
    x:Class="ClearDashboard.Wpf.Application.Views.Project.ProjectDesignSurfaceView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:cm="http://caliburnmicro.com"
    xmlns:controls="clr-namespace:ClearDashboard.Wpf.Controls;assembly=ClearDashboard.Wpf.Controls"
    xmlns:converters="clr-namespace:ClearDashboard.Wpf.Application.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:helpers="clr-namespace:ClearDashboard.Wpf.Application.Helpers"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:local="clr-namespace:ClearDashboard.Wpf.Application.Views.Project"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:ClearDashboard.DataAccessLayer.Models;assembly=ClearDashboard.DAL.Models"
    xmlns:project="clr-namespace:ClearDashboard.Wpf.Application.ViewModels.Project"
    xmlns:projectDesignSurface="clr-namespace:ClearDashboard.Wpf.Application.ViewModels.ProjectDesignSurface"
    xmlns:resx="clr-namespace:ClearDashboard.Wpf.Application.Strings"
    xmlns:viewModels="clr-namespace:ClearDashboard.Wpf.Application.ViewModels"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    Width="500"
    d:DataContext="{d:DesignInstance Type=project:ProjectDesignSurfaceViewModel,
                                     IsDesignTimeCreatable=True}"
    d:DesignHeight="450"
    d:DesignWidth="300"
    helpers:Translation.ResourceManager="{x:Static resx:Resources.ResourceManager}"
    mc:Ignorable="d">

    <!--<UserControl.DataContext>
        <viewModels:ProjectDesignSurfaceViewModel />
    </UserControl.DataContext>-->

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!--
                    Merge in the resource dictionary that is shared between the main window and the overview window.
                -->

                <ResourceDictionary Source="/Views/ProjectDesignSurface/SharedVisualTemplates.xaml" />

            </ResourceDictionary.MergedDictionaries>

            <!--  UI commands.  -->

            <RoutedUICommand x:Key="Commands.DeleteSelectedNodes" />
            <RoutedUICommand x:Key="Commands.CreateNode" />
            <RoutedUICommand x:Key="Commands.NodeProperties" />
            <RoutedUICommand x:Key="Commands.ConnectionProperties" />
            <RoutedUICommand x:Key="Commands.DeleteNode" />
            <RoutedUICommand x:Key="Commands.DeleteConnection" />
            <RoutedUICommand x:Key="Commands.ZoomOut" />
            <RoutedUICommand x:Key="Commands.ZoomIn" />
            <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom" />
            <RoutedUICommand x:Key="Commands.FitContent" />
            <RoutedUICommand x:Key="Commands.Fill" />
            <RoutedUICommand x:Key="Commands.OneHundredPercent" />
            <!--<RoutedUICommand x:Key="Commands.ToggleCorpusVisibility" />-->

            <!--
                This converts from a scale value to a percentage value.
                It is used to convert the value of 'ContentScale' to the percentage zoom level that is displayed in the UI.
            -->
            <converters:ScaleToPercentConverter x:Key="ScaleToPercentConverter" />
            <converters:EnumToValuesConverter x:Key="EnumToValuesConverter" />
            <converters:StringToMaterialDesignKindConverter x:Key="StringToMaterialDesignKindConverter" />
            <BoolToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

            <!--
                This graphic is used to indicate that a connection cannot be made between two particular connectors.
            -->
            <DataTemplate DataType="{x:Type viewModels:ConnectionBadIndicator}">
                <Grid Width="80">
                    <Image
                        Width="32"
                        Height="32"
                        HorizontalAlignment="Right"
                        Source="/Resources/block_16.png" />
                </Grid>
            </DataTemplate>

            <!--
                This graphic is used to indicate that a connection can be made between two particular connectors.
            -->
            <DataTemplate DataType="{x:Type viewModels:ConnectionOkIndicator}">
                <Grid Width="80">
                    <Image
                        Width="32"
                        Height="32"
                        HorizontalAlignment="Right"
                        Source="/Resources/tick_16.png" />
                </Grid>
            </DataTemplate>

            <!--
                Define the visual style for a 'ConnectorItem'.
            -->
            <Style TargetType="{x:Type controls:ConnectorItem}">
                <!--
                    Data-binding for the connector hotspot.
                    ConnectorItem automatically computes its center points and assings this value
                    to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application
                    view-model.
                -->
                <Setter Property="Hotspot" Value="{Binding Hotspot, Mode=OneWayToSource}" />

                <!--  The visual template.  -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:ConnectorItem}">
                            <!--  The visual for the connector.  -->
                            <Ellipse Fill="{StaticResource connectorBackgroundBrush}" Stroke="{StaticResource nodeBorderBrush}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="BigButton" TargetType="Button">
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Height" Value="80" />
                <Setter Property="MinWidth" Value="80" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
                <!--<Setter Property="FontWeight" Value="Bold" />-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border
                                x:Name="border"
                                Background="{DynamicResource PrimaryHueDarkBrush}"
                                CornerRadius="5">
                                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <materialDesign:PackIcon
                                        Width="36"
                                        Height="36"
                                        Margin="5,5,5,5"
                                        HorizontalAlignment="Center"
                                        Kind="{TemplateBinding Tag,
                                                               Converter={StaticResource StringToMaterialDesignKindConverter}}" />
                                    <ContentPresenter
                                        x:Name="ButtonContentPresenter"
                                        Margin="5,0,5,0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center" />
                                </StackPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="BigParatextButton" TargetType="Button">
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Height" Value="80" />
                <Setter Property="MinWidth" Value="80" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
                <!--<Setter Property="FontWeight" Value="Bold" />-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border
                                x:Name="border"
                                Background="{DynamicResource PrimaryHueDarkBrush}"
                                CornerRadius="5">
                                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Image
                                        Width="36"
                                        Height="36"
                                        Margin="5,5,5,5"
                                        HorizontalAlignment="Center"
                                        Source="/Resources/Paratext_white_Icon48.png" />

                                    <ContentPresenter
                                        x:Name="ButtonContentPresenter"
                                        Margin="5,0,5,0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center" />
                                </StackPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <!--
                Template for the contextmenu
            -->
            <ControlTemplate x:Key="mist" TargetType="{x:Type MenuItem}">
                <Separator />
            </ControlTemplate>

            <ControlTemplate x:Key="mict" TargetType="{x:Type MenuItem}">
                <MenuItem Header="{Binding Caption}" />
            </ControlTemplate>

            <Style x:Key="cmics" TargetType="{x:Type MenuItem}">
                <Setter Property="Template" Value="{StaticResource mict}" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                        <Setter Property="Template" Value="{StaticResource mist}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>


            <!--
                Template for the button that is used to delete nodes and connections in the graph.
                This button is displayed in an adorner when the user hovers the mouse over a node or connection.
            -->
            <ControlTemplate x:Key="deleteButtonTemplate" TargetType="{x:Type Button}">
                <Grid x:Name="grid">
                    <Grid.RenderTransform>
                        <ScaleTransform CenterX="10" CenterY="10" ScaleX="1" ScaleY="1" />
                    </Grid.RenderTransform>
                    <Ellipse
                        x:Name="shadow"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Fill="Gray">
                        <Ellipse.RenderTransform>
                            <TranslateTransform X="1.5" Y="1.5" />
                        </Ellipse.RenderTransform>
                    </Ellipse>
                    <Ellipse
                        x:Name="ellipse"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Fill="White"
                        Stroke="Black" />
                    <Image Margin="2" Source="/Resources/scissors.png" />
                </Grid>
                <ControlTemplate.Triggers>
                    <EventTrigger RoutedEvent="Mouse.MouseEnter">
                        <!--
                            Make the 'delete connection button' larger when the mouse
                            cursor is hovered over it.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1.3"
                                    Duration="0:0:0.25" />
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1.3"
                                    Duration="0:0:0.25" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>

                    <EventTrigger RoutedEvent="Mouse.MouseLeave">
                        <!--
                            Return the 'delete connection button' to normal size when the mouse
                            cursor is moved away.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1"
                                    Duration="0:0:0.05" />
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1"
                                    Duration="0:0:0.05" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ControlTemplate.Triggers>

            </ControlTemplate>

            <!--
                Data-template for ConnectionViewModel.
                
                Note that the 'Start' and 'End' of the arrow are bound to 'SourceConnectorHotspot' and 'DestinationConnectorHotspot' in
                the view-model.
                
                In this sample a curved arrow represents connections between nodes.
            -->
            <DataTemplate DataType="{x:Type viewModels:ConnectionViewModel}">

                <!--
                    An adorned control is used, to represent the connection.
                    When the user hovers the mouse cursor over the connection, the
                    'delete connection' adorner pops up and allows them to delete the connection.
                -->
                <controls:AdornedControl
                    HorizontalAdornerPlacement="Mouse"
                    IsMouseOverShowEnabled="{Binding ElementName=ProjectDesignSurface, Path=IsNotDragging}"
                    VerticalAdornerPlacement="Mouse">

                    <!--  The connection is represented by a curved arrow.  -->
                    <viewModels:CurvedArrow
                        ConnectionId="{Binding Path=Id}"
                        Fill="{StaticResource connectionBrush}"
                        NodeSource="{Binding Path=SourceConnector}"
                        NodeTarget="{Binding Path=DestinationConnector}"
                        Points="{Binding Points}"
                        Stroke="{StaticResource connectionBrush}"
                        StrokeThickness="3">
                        <viewModels:CurvedArrow.ContextMenu>
                            <ContextMenu Name="ContextMenu">
                                <MenuItem
                                    Command="{StaticResource Commands.ConnectionProperties}"
                                    CommandParameter="{Binding}"
                                    Header="{helpers:Localization Pds_PropertiesMenu}"
                                    ToolTip="View the corpus properties" />
                                <!--
                                    Command="{StaticResource Commands.Properties}"
                                    cm:Message.Attach="[Event Click] = [Action ShowCorpusProperties($this)]"
                                    CommandParameter="{Binding ElementName=nodeRectangle}"
                                -->

                            </ContextMenu>
                        </viewModels:CurvedArrow.ContextMenu>
                    </viewModels:CurvedArrow>

                    <controls:AdornedControl.AdornerContent>

                        <!--
                            This is the adorner that pops up when the user hovers the mouse over the connection.
                            It displays a button that the user can click to delete the connection.
                        -->
                        <Canvas
                            x:Name="connectionAdornerCanvas"
                            Width="30"
                            Height="30"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top">
                            <Line
                                Stroke="Black"
                                StrokeThickness="1"
                                X1="0"
                                X2="15"
                                Y1="30"
                                Y2="15" />
                            <Button
                                x:Name="deleteConnectionButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Command="{StaticResource Commands.DeleteConnection}"
                                CommandParameter="{Binding}"
                                Cursor="Hand"
                                Focusable="False"
                                Template="{StaticResource deleteButtonTemplate}" />
                        </Canvas>
                    </controls:AdornedControl.AdornerContent>
                </controls:AdornedControl>
            </DataTemplate>

            <!--  Define a data-template for the 'NodeViewModel' class.  -->
            <DataTemplate x:Name="NodeViewModelTemplate" DataType="{x:Type viewModels:CorpusNodeViewModel}">

                <!--
                    An adorned control is used, to represent the node.
                    When the user hovers the mouse cursor over the node, the
                    'delete node' adorner pops up and allows them to delete the node.
                -->
                <controls:AdornedControl
                    AdornerOffsetX="-12"
                    AdornerOffsetY="8"
                    HorizontalAdornerPlacement="Outside"
                    IsMouseOverShowEnabled="{Binding ElementName=ProjectDesignSurface, Path=IsNotDragging}"
                    VerticalAdornerPlacement="Outside">

                    <!--  The margin has been selected so that the selection rect nicely covers the entire node.  -->

                    <Grid
                        MinWidth="150"
                        Margin="10,6,10,6"
                        SizeChanged="OnCorpusNodeSizeChanged">

                        <!--  This rectangle is the main visual for the node.  -->

                        <Rectangle
                            x:Name="nodeRectangle"
                            RadiusX="4"
                            RadiusY="4"
                            Stroke="{StaticResource nodeBorderBrush}"
                            StrokeThickness="1.3">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding CorpusType}" Value="{x:Static models:CorpusType.Standard}">
                                            <Setter Property="Fill" Value="{StaticResource nodeFillBrushStandardProject}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding CorpusType}" Value="{x:Static models:CorpusType.BackTranslation}">
                                            <Setter Property="Fill" Value="{StaticResource nodeFillBrushBacktranslationProject}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding CorpusType}" Value="{x:Static models:CorpusType.Resource}">
                                            <Setter Property="Fill" Value="{StaticResource nodeFillBrushReferenceProject}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding CorpusType}" Value="{x:Static models:CorpusType.Unknown}">
                                            <Setter Property="Fill" Value="{StaticResource nodeFillBrushReferenceUnknown}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding CorpusType}" Value="{x:Static models:CorpusType.Manuscript}">
                                            <Setter Property="Fill" Value="{StaticResource nodeFillBrushReferenceManuscript}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                            <Rectangle.ContextMenu>
                                <ContextMenu Name="ContextMenu" ItemsSource="{Binding MenuItems}">
                                    <ContextMenu.Resources>

                                        <HierarchicalDataTemplate DataType="{x:Type projectDesignSurface:NodeMenuItemViewModel}" ItemsSource="{Binding Path=MenuItems}">
                                            <StackPanel Orientation="Horizontal">
                                                <iconPacks:PackIconPicolIcons
                                                    Width="15"
                                                    Height="15"
                                                    Margin="5,5,0,0"
                                                    VerticalAlignment="Center"
                                                    Kind="{Binding IconKind}" />
                                                <TextBlock
                                                    Margin="5,5,0,0"
                                                    VerticalAlignment="Center"
                                                    Foreground="{DynamicResource PrimaryHueMidBrush}"
                                                    Text="{Binding Header}" />
                                            </StackPanel>
                                        </HierarchicalDataTemplate>

                                        <Style TargetType="MenuItem">
                                            <Setter Property="Command" Value="{Binding Command}" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type MenuItem}">
                                                                <Separator />
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>

                                                <!--<DataTrigger Binding="{Binding IsSeparator}" Value="False">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type MenuItem}">
                                                                <StackPanel Orientation="Horizontal">
                                                                    <iconPacks:PackIconPicolIcons
                                                                        Width="15"
                                                                        VerticalAlignment="Center"
                                                                        Margin="5 5 0 0"
                                                                        Height="15"
                                                                        Kind="{Binding IconKind}" />
                                                                    <TextBlock
                                                                        Margin="5,5,0,0"
                                                                        VerticalAlignment="Center"
                                                                        Foreground="{DynamicResource PrimaryHueMidBrush}"
                                                                        Text="{Binding Header}" />
                                                                </StackPanel>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="Command" Value="{Binding Command}" />
                                                </DataTrigger>-->
                                            </Style.Triggers>
                                        </Style>
                                    </ContextMenu.Resources>


                                    <!--<ContextMenu.ItemContainerStyle>
                                        <Style BasedOn="{StaticResource MaterialDesignMenuItem}" TargetType="{x:Type MenuItem}">
                                            <Setter Property="Icon" Value="{Binding Icon}" />
                                            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignDarkForeground}" />
                                            <Setter Property="Command" Value="{Binding Command}" />
                                        </Style>
                                    </ContextMenu.ItemContainerStyle>
                                    <ContextMenu.ItemTemplate>
                                        <HierarchicalDataTemplate DataType="{x:Type projectDesignSurface:NodeMenuItemViewModel}" ItemsSource="{Binding Path=MenuItems}">
                                            <TextBlock
                                                Margin="5,5,0,0"
                                                VerticalAlignment="Center"
                                                Foreground="{DynamicResource PrimaryHueMidBrush}"
                                                Text="{Binding Header}" />
                                        </HierarchicalDataTemplate>
                                    </ContextMenu.ItemTemplate>-->

                                    <!--<ContextMenu.ItemTemplate>
                                        <HierarchicalDataTemplate DataType="{x:Type projectDesignSurface:NodeMenuItemViewModel}" ItemsSource="{Binding Path=MenuItems}">
                                            <TextBlock
                                                Margin="5,5,0,0"
                                                VerticalAlignment="Center"
                                                Foreground="{DynamicResource PrimaryHueMidBrush}"
                                                Text="{Binding Header}" />
                                        </HierarchicalDataTemplate>
                                    </ContextMenu.ItemTemplate>-->

                                    <!--<MenuItem
                                        Command="{StaticResource Commands.CreateNode}"
                                        Header="View Verse Text"
                                        ToolTip="View the verse text for the corpus" />
                                    <MenuItem
                                        Command="{StaticResource Commands.CreateNode}"
                                        Header="Edit Tokenizer"
                                        ToolTip="Edit the corpus tokenizer" />
                                    <Separator />
                                    <MenuItem
                                        Command="{StaticResource Commands.NodeProperties}"
                                        CommandParameter="{Binding}"
                                        Header="Properties"
                                        ToolTip="View the corpus properties" />-->

                                </ContextMenu>
                            </Rectangle.ContextMenu>
                        </Rectangle>



                        <!--<Button
                            Width="25"
                            Height="25"
                            Margin="5,5,0,0"
                            Padding="0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            Command="{StaticResource Commands.ToggleCorpusVisibility}"
                            CommandParameter="{Binding Path=DataContext, ElementName=nodeRectangle}"
                            Style="{StaticResource MaterialDesignFlatButton}">
                            <materialDesign:PackIcon Width="20" Height="20">
                                <materialDesign:PackIcon.Style>
                                    <Style TargetType="materialDesign:PackIcon">
                                        <Setter Property="Kind" Value="Eye" />
                                        <Setter Property="Foreground" Value="{StaticResource GreenMidBrush}" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsCorpusVisible}" Value="False">
                                                <Setter Property="Kind" Value="EyeOff" />
                                                <Setter Property="Foreground" Value="{StaticResource RedMidBrush}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </materialDesign:PackIcon.Style>
                            </materialDesign:PackIcon>
                        </Button>-->

                        <!--
                            This grid contains the node's connectors.
                            The margin is negative so that the connectors overlap the body of the node and it's selection border.
                        -->
                        <Grid Margin="-6,0,-6,12">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" MinWidth="10" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="20" />
                                <RowDefinition Height="Auto" />
                                <!--  spacer  -->
                                <RowDefinition Height="2" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!--  The name of the node.  -->
                            <TextBlock
                                x:Name="tb1"
                                Grid.Row="0"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontWeight="Bold"
                                Text="{Binding Name}" />

                            <!--  The project type of the node.  -->
                            <TextBlock
                                x:Name="tb2"
                                Grid.Row="1"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Text="{Binding CorpusType}" />

                            <!--  Displays the node's input connectors.  -->
                            <ItemsControl
                                Grid.Row="3"
                                Grid.Column="0"
                                Focusable="False"
                                ItemTemplate="{StaticResource inputConnectorTemplate}"
                                ItemsSource="{Binding InputConnectors}" />


                            <materialDesign:Chip
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="2"
                                Width="30"
                                Height="30"
                                Margin="0,-5,6,0"
                                HorizontalAlignment="Right"
                                Content="{Binding Path=NodeTokenizations.Count, UpdateSourceTrigger=PropertyChanged}"
                                ToolTip="Number of different tokenizations">
                                <materialDesign:Chip.Style>
                                    <Style TargetType="materialDesign:Chip">
                                        <Setter Property="Padding" Value="0" />
                                    </Style>
                                </materialDesign:Chip.Style>
                            </materialDesign:Chip>

                            <!--  Displays the node's output connectors.  -->
                            <ItemsControl
                                Grid.Row="3"
                                Grid.Column="2"
                                Focusable="False"
                                ItemTemplate="{StaticResource outputConnectorTemplate}"
                                ItemsSource="{Binding OutputConnectors}" />
                        </Grid>
                    </Grid>

                    <controls:AdornedControl.AdornerContent>

                        <!--
                            This is the adorner that pops up when the user hovers the mouse over the node.
                            It displays a button that the user can click to delete the node.
                        -->
                        <Canvas
                            x:Name="nodeAdornerCanvas"
                            Width="30"
                            Height="30"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top">
                            <Line
                                Stroke="Black"
                                StrokeThickness="1"
                                X1="0"
                                X2="15"
                                Y1="30"
                                Y2="15" />
                            <Button
                                x:Name="deleteNodeButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Command="{StaticResource Commands.DeleteNode}"
                                CommandParameter="{Binding}"
                                Cursor="Hand"
                                Focusable="False"
                                Template="{StaticResource deleteButtonTemplate}" />
                        </Canvas>
                    </controls:AdornedControl.AdornerContent>
                </controls:AdornedControl>
            </DataTemplate>




        </ResourceDictionary>

    </UserControl.Resources>

    <UserControl.InputBindings>

        <!--  Bind input to commands.  -->

        <KeyBinding Key="Del" Command="{StaticResource Commands.DeleteSelectedNodes}" />
        <KeyBinding Key="Minus" Command="{StaticResource Commands.ZoomOut}" />
        <KeyBinding Key="Plus" Command="{StaticResource Commands.ZoomIn}" />
        <KeyBinding Key="Backspace" Command="{StaticResource Commands.JumpBackToPrevZoom}" />
        <KeyBinding Key="Space" Command="{StaticResource Commands.FitContent}" />

    </UserControl.InputBindings>

    <UserControl.CommandBindings>

        <!--  Bind commands to event handlers.  -->

        <CommandBinding Command="{StaticResource Commands.DeleteSelectedNodes}" Executed="OnDeleteSelectedNodesExecuted" />
        <CommandBinding Command="{StaticResource Commands.CreateNode}" Executed="OnCreateCorpusNodeExecuted" />
        <CommandBinding Command="{StaticResource Commands.NodeProperties}" Executed="OnCorpusNodeProperties" />
        <CommandBinding Command="{StaticResource Commands.ConnectionProperties}" Executed="OnConnectionProperties" />
        <CommandBinding Command="{StaticResource Commands.DeleteNode}" Executed="OnDeleteCorpusNodeExecuted" />
        <CommandBinding Command="{StaticResource Commands.DeleteConnection}" Executed="OnDeleteConnectionExecuted" />
        <CommandBinding Command="{StaticResource Commands.ZoomOut}" Executed="ZoomOut_Executed" />
        <CommandBinding Command="{StaticResource Commands.ZoomIn}" Executed="ZoomIn_Executed" />
        <CommandBinding
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            Command="{StaticResource Commands.JumpBackToPrevZoom}"
            Executed="JumpBackToPrevZoom_Executed" />
        <CommandBinding Command="{StaticResource Commands.FitContent}" Executed="FitContent_Executed" />
        <CommandBinding Command="{StaticResource Commands.Fill}" Executed="Fill_Executed" />
        <CommandBinding Command="{StaticResource Commands.OneHundredPercent}" Executed="OneHundredPercent_Executed" />
        <!--<CommandBinding Command="{StaticResource Commands.ToggleCorpusVisibility}" Executed="ToggleCorpusVisibility_Executed" />-->

    </UserControl.CommandBindings>

    <!--<UserControl.ContextMenu>

        <ContextMenu>

    -->
    <!--  Clicking this menu item creates a new node.  -->
    <!--

            <MenuItem
                Command="{StaticResource Commands.CreateNode}"
                Header="Create Node"
                ToolTip="Creates a new node" />

            <Separator />

            <MenuItem
                Command="{StaticResource Commands.FitContent}"
                Header="Fit"
                ToolTip="Fit selected nodes to the viewport, when nothing is selected fits all nodes to the viewport" />
            <MenuItem
                Command="{StaticResource Commands.Fill}"
                Header="Fill"
                ToolTip="Fit the entire content area to the viewport" />
            <MenuItem
                Command="{StaticResource Commands.OneHundredPercent}"
                Header="100%"
                ToolTip="Scale the content to 100%" />
            <MenuItem
                Command="{StaticResource Commands.JumpBackToPrevZoom}"
                Header="Previous Zoom"
                ToolTip="Return to the previous zoom level" />

            <Separator />

            <MenuItem
                Command="{StaticResource Commands.ZoomOut}"
                Header="Zoom Out"
                ToolTip="Zooms out from the canvas" />
            <MenuItem
                Command="{StaticResource Commands.ZoomOut}"
                Header="Zoom In"
                ToolTip="Zooms in on the canvas" />

        </ContextMenu>
    </UserControl.ContextMenu>-->



    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="200" />
        </Grid.RowDefinitions>
        <materialDesign:Card
            Margin="0"
            Padding="5"
            Background="{DynamicResource PrimaryHueMidBrush}"
            Foreground="{DynamicResource PrimaryHueDarkForegroundBrush}"
            IsEnabled="{Binding AddCorpusEnabled}">
            <StackPanel Grid.Row="0" MinWidth="400">
                <!--  Add Corpora  -->
                <Label
                    Margin="5,5,0,5"
                    Content="{helpers:Localization Pds_AddCorpora}"
                    FontSize="16"
                    Foreground="{DynamicResource PrimaryHueMidForegroundBrush}" />
                <WrapPanel>
                    <!--  Manuscript  -->
                    <Button
                        x:Name="AddManuscriptCorpus"
                        Margin="10,0,10,10"
                        cm:Message.Attach="AddManuscriptCorpus()"
                        Content="{helpers:Localization Pds_Manuscript}"
                        IsEnabled="{Binding AddManuscriptEnabled}"
                        Style="{StaticResource BigButton}"
                        Tag=" ScriptTextOutline" />
                    <!--<Button
                        x:Name="AddUsfmCorpus"
                        Margin="10,0,10,10"
                        cm:Message.Attach="AddUsfmCorpus()"
                        Content="USFM"
                        Style="{StaticResource BigButton}"
                        Tag="ScriptTextOutline"
                        Visibility="Collapsed" />-->
                    <Button
                        x:Name="AddParatextCorpus"
                        Margin="10,0,10,10"
                        cm:Message.Attach="AddParatextCorpus()"
                        Content="Paratext"
                        Style="{StaticResource BigParatextButton}"
                        Tag=" ScriptTextOutline" />
                </WrapPanel>
            </StackPanel>
        </materialDesign:Card>

        <ProgressBar
            Width="50"
            Height="50"
            Margin="0,0,50,0"
            HorizontalAlignment="Right"
            VerticalAlignment="Center"
            Foreground="{DynamicResource SecondaryHueMidBrush}"
            IsIndeterminate="True"
            Value="0">
            <ProgressBar.Style>
                <Style BasedOn="{StaticResource MaterialDesignCircularProgressBar}" TargetType="ProgressBar">
                    <Setter Property="Visibility" Value="Visible" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding AddCorpusEnabled}" Value="True">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ProgressBar.Style>
        </ProgressBar>


        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <!--<Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>-->

            <!--  Grid placed below the zoom and pan control that contains the zoom slider, zoom label and some buttons.  -->

            <Grid Margin="5,5,5,5" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>

                    <!--  empty space  -->
                    <ColumnDefinition Width="Auto" />

                    <!--  the fit content button  -->
                    <ColumnDefinition Width="40" />

                    <!--  spacer  -->
                    <ColumnDefinition Width="5" />

                    <!--  the fill button  -->
                    <ColumnDefinition Width="40" />

                    <!--  spacer  -->
                    <ColumnDefinition Width="5" />

                    <!--  the 100% button  -->
                    <ColumnDefinition Width="40" />

                    <!--  spacer  -->
                    <ColumnDefinition Width="5" />

                    <!--  the zoom percentage label  -->
                    <ColumnDefinition Width="30" />

                    <!--  the % symbol  -->
                    <ColumnDefinition Width="15" />

                    <!--  spacer  -->
                    <ColumnDefinition Width="5" />

                    <!--  the zoom out button  -->
                    <ColumnDefinition Width="35" />

                    <!--  spacer  -->
                    <ColumnDefinition Width="5" />

                    <!--  the zoom slider  -->
                    <ColumnDefinition Width="120" />

                    <!--  spacer  -->
                    <ColumnDefinition Width="5" />

                    <!--  the zoom in button  -->
                    <ColumnDefinition Width="35" />

                    <!--  spacer  -->
                    <ColumnDefinition Width="10" />

                    <!--  resize grip  -->
                    <ColumnDefinition Width="Auto" />

                </Grid.ColumnDefinitions>

                <!--
                    The 'fit content' button.  Causes the content to be scaled so that all the graph nodes fit in the viewport.
                -->
                <Button
                    Grid.Column="1"
                    Padding="0"
                    Command="{StaticResource Commands.FitContent}"
                    ToolTip="Fit all nodes to the viewport">
                    <materialDesign:PackIcon Kind="FitToScreenOutline" />
                </Button>

                <!--
                    The fill button.  Causes the content to be scaled so that it fits in the viewport.
                -->
                <Button
                    Grid.Column="3"
                    Padding="0"
                    Command="{StaticResource Commands.Fill}"
                    ToolTip="Fit the entire content area to the viewport">
                    <materialDesign:PackIcon Kind="FitToPageOutline" />
                </Button>

                <!--
                    The 100% button.  Causes the content to be scaled to 100 percent.
                -->
                <Button
                    Grid.Column="5"
                    Padding="0"
                    Command="{StaticResource Commands.OneHundredPercent}"
                    ToolTip="Scale the content to 100%">
                    100%
                </Button>

                <!--
                    This is the label that shows what the current zoom level
                    is while zooming in and out.
                -->
                <TextBlock
                    x:Name="tb3"
                    Grid.Column="7"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Text="{Binding ElementName=zoomAndPanControl, Path=ContentScale, Converter={StaticResource ScaleToPercentConverter}}" />

                <TextBlock
                    x:Name="tb4"
                    Grid.Column="8"
                    VerticalAlignment="Center"
                    Text="%" />

                <!--  Button to zoom out.  -->
                <Button
                    Grid.Column="10"
                    Padding="0"
                    Command="{StaticResource Commands.ZoomOut}"
                    FontSize="25"
                    ToolTip="Zoom out from the content">
                    -
                </Button>

                <!--  Slider to change the current zoom level.  -->
                <Slider
                    Grid.Column="12"
                    LargeChange="20"
                    Maximum="200"
                    Minimum="10"
                    SmallChange="10"
                    TickFrequency="10"
                    TickPlacement="TopLeft"
                    ToolTip="Change the zoom level of the content"
                    Value="{Binding ElementName=zoomAndPanControl, Path=ContentScale, Converter={StaticResource ScaleToPercentConverter}}" />

                <!--
                    Button to zoom in.
                -->
                <Button
                    Grid.Column="14"
                    Padding="0"
                    Command="{StaticResource Commands.ZoomIn}"
                    FontSize="20"
                    ToolTip="Zoom in on the content">
                    +
                </Button>

                <!--  Stick a resize grip in the bottom right corner of the window.  -->
                <!--<ResizeGrip Grid.Column="16" />-->

            </Grid>

            <!--
                The ScrollViewer displays scrollbars when the content is too big to fit in the viewport.
                Focusable is set to False because it is only that NetworkView that I want to be focusable.
            -->
            <ScrollViewer
                Grid.Row="1"
                Grid.Column="0"
                Margin="5,5,0,0"
                CanContentScroll="True"
                Focusable="False"
                HorizontalScrollBarVisibility="Visible"
                VerticalScrollBarVisibility="Visible">

                <!--
                    The ZoomAndPanControl displays the NetworkView as its content.
                    We can use the mouse to zoom and pan about the NetworkView.
                -->
                <controls:ZoomAndPanControl
                    x:Name="zoomAndPanControl"
                    Background="LightGray"
                    ContentOffsetX="{Binding ContentOffsetX, Mode=TwoWay}"
                    ContentOffsetY="{Binding ContentOffsetY, Mode=TwoWay}"
                    ContentScale="{Binding ContentScale, Mode=TwoWay}"
                    ContentViewportHeight="{Binding ContentViewportHeight, Mode=OneWayToSource}"
                    ContentViewportWidth="{Binding ContentViewportWidth, Mode=OneWayToSource}"
                    Focusable="False">



                    <!--
                        We need to nest our NetworkView in an AdornerDecorator so that adorners work correct when
                        we zoom in and out using the ZoomAndPanControl
                    -->
                    <AdornerDecorator>
                        <!--
                            This grid specifies the size of the ZoomAndPanControl's content.
                            It wraps up both the NetworkView and drag-zooming Canvas.
                        -->
                        <Grid Width="{Binding ContentWidth}" Height="{Binding ContentHeight}">

                            <!--  In this sample the NetworkView is the content displayed by the ZoomAndPanControl.  -->
                            <controls:ProjectDesignSurface
                                x:Name="ProjectDesignSurface"
                                ConnectionDragCompleted="OnProjectDesignSurfaceConnectionDragCompleted"
                                ConnectionDragStarted="OnProjectDesignSurfaceConnectionDragStarted"
                                ConnectionDragging="OnProjectDesignSurfaceConnectionDragging"
                                ConnectionsSource="{Binding Path=DesignSurface.Connections}"
                                MouseDown="OnDesignSurfaceMouseDown"
                                MouseMove="networkControl_MouseMove"
                                MouseUp="OnDesignSurfaceMouseUp"
                                MouseWheel="networkControl_MouseWheel"
                                NodesSource="{Binding DesignSurface.CorpusNodes}"
                                QueryConnectionFeedback="OnProjectDesignSurfaceQueryConnectionFeedback" />

                            <!--
                                This Canvas and Border are used as a very simple way to render a drag rectangle that the user
                                uses to specify an area to zoom in on.
                            -->
                            <Canvas x:Name="DragZoomCanvas" Visibility="Collapsed">
                                <Border
                                    x:Name="DragZoomBorder"
                                    Background="Silver"
                                    BorderBrush="Black"
                                    BorderThickness="1"
                                    CornerRadius="1"
                                    Opacity="0" />
                            </Canvas>
                        </Grid>
                    </AdornerDecorator>
                </controls:ZoomAndPanControl>
            </ScrollViewer>
        </Grid>

        <xctk:PropertyGrid
            x:Name="_propertyGrid"
            Grid.Row="2"
            Margin="5,5,35,5"
            Filter=""
            Foreground="Black"
            HideInheritedProperties="False"
            IsCategorized="False"
            IsMiscCategoryLabelHidden="False"
            IsReadOnly="False"
            IsVirtualizing="False"
            SelectedObject="{Binding SelectedConnection}"
            ShowAdvancedOptions="False"
            ShowHorizontalScrollBar="True"
            ShowSummary="False"
            UpdateTextBoxSourceOnEnterKey="True" />
    </Grid>
</UserControl>
