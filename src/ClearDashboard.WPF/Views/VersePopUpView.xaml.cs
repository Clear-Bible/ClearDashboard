using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace ClearDashboard.Wpf.Views
{
    /// <summary>
    /// Interaction logic for VersePopUpView.xaml
    /// </summary>
    public partial class VersePopUpView : Window
    {
        public VersePopUpView()
        {
            InitializeComponent();
        }

        private void gridVerses_AutoGeneratedColumns(object sender, EventArgs e)
        {
            int firstRowWidth = 50;
            int verseRowWidth = 60;
            int lastColumnbuffer = 20;
            var width = (gridVerses.ActualWidth - (firstRowWidth + verseRowWidth + lastColumnbuffer)) / (gridVerses.Columns.Count - 2);

            for (int i = 0; i < gridVerses.Columns.Count; i++)
            {
                if (i == 0)
                {
                    gridVerses.Columns[i].Width = firstRowWidth;
                }
                else if (i == 1)
                {
                    gridVerses.Columns[i].Width = verseRowWidth;
                    if (gridVerses.Columns[i] is DataGridTextColumn textColumn)
                    {
                        // Create new style based on the existing one.  Adding a Setter to it
                        // that turns on word-wrapping.
                        var style = new Style(typeof(TextBlock), textColumn.ElementStyle);
                        style.Setters.Add(new Setter(TextBlock.VerticalAlignmentProperty,  VerticalAlignment.Center));
                        textColumn.ElementStyle = style;
                    }
                }
                else
                {
                    gridVerses.Columns[i].Width = width;
                    // Cast the column to a DataGridTextColumn
                    if (gridVerses.Columns[i] is DataGridTextColumn textColumn)
                    {
                        // Create new style based on the existing one.  Adding a Setter to it
                        // that turns on word-wrapping.
                        var style = new Style(typeof(TextBlock), textColumn.ElementStyle);
                        style.Setters.Add(new Setter(TextBlock.TextWrappingProperty, TextWrapping.Wrap));
                        textColumn.ElementStyle = style;
                    }
                }
            }
        }
    }
}
